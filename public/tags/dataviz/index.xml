<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Dataviz on favstats - personal blog</title>
    <link>/tags/dataviz/</link>
    <description>Recent content in Dataviz on favstats - personal blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2018 Fabio Votta</copyright>
    <lastBuildDate>Sat, 01 Sep 2018 00:00:00 +0200</lastBuildDate>
    
	<atom:link href="/tags/dataviz/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Visualizing Temperature Rise in Stuttgart, Germany over Time</title>
      <link>/post/temperature_viz/</link>
      <pubDate>Sat, 01 Sep 2018 00:00:00 +0200</pubDate>
      
      <guid>/post/temperature_viz/</guid>
      <description>This is a quick use-case of gganimate to visualize the rise of average temperature in my home town, Stuttgart, Germany.
Get Packages pacman::p_load(tidyverse, rvest, gganimate)  Get and Save Data You can get the data from here: https://icdc.cen.uni-hamburg.de/daten/atmosphere/dwd-station.html
 The German Weather Service (DWD) provides climate data for more than 70 observation stations from the measurement network in Germany. The stations provide scheduled, daily and monthly readings of temperatures, rainfall, sunshine duration, wind speed, humidity, barometric pressure and cloud cover, which are updated daily.</description>
    </item>
    
    <item>
      <title>How does Collinearity Influence Linear Regressions?</title>
      <link>/post/multicol_sim/</link>
      <pubDate>Tue, 28 Aug 2018 00:00:00 +0200</pubDate>
      
      <guid>/post/multicol_sim/</guid>
      <description>This is a short simulation study trying to figure out the impact of collinearity on linear regressions.
Overview:
 Packages Simulation Function Simulate and Save Data Visualizing the Influence of Collinearity  Standard Errors T-Statistic and P-Values B-Coefficients Animation Standardized   Packages Load the necessary packages
# install pacman once if not avaible on your machine # install.packages(&amp;quot;pacman&amp;quot;) pacman::p_load(arm, purrr, MASS, broom, ggthemes, tidyverse, ecodist, viridis, gridExtra, grid, lm.</description>
    </item>
    
    <item>
      <title>Analyzing Tweets of the ECPR General Conference 2018</title>
      <link>/post/ecprconf18/</link>
      <pubDate>Sat, 25 Aug 2018 00:00:00 +0200</pubDate>
      
      <guid>/post/ecprconf18/</guid>
      <description>This is a short notebook outlining the code used to scrape tweets related to the ECPR Conference 2018 in Hamburg.
Packages Load the necessary packages
# install pacman once if not avaible on your machine # install.packages(&amp;quot;pacman&amp;quot;) pacman::p_load(tidyverse, purrr, tidyr, rtweet, stringr, ggraph, igraph, tidygraph, forcats)  Get Data If you want to scrape data yourself you have to register a free account where you get your personal access point to Twitter.</description>
    </item>
    
    <item>
      <title>Mapping Terror Attacks with Highcharter</title>
      <link>/post/terror_map/</link>
      <pubDate>Wed, 03 Jan 2018 00:00:00 +0100</pubDate>
      
      <guid>/post/terror_map/</guid>
      <description>A few days ago someone asked me whether I could visualize the terror attacks of recent years in Europe. Here is an attempt to do exactly this.
The code for this blogpost can be found in this GitHub Repository.
Getting Started
First I need data about terror attacks. For this I downloaded the Global Terrorism Database.
Now in Rstudio, I load in the needed packages:
pacman::p_load(tidyverse, magrittr, readxl, highcharter)  After I put the downloaded .</description>
    </item>
    
    <item>
      <title>Mapping your 2017 Geolocations: The Tidy Way</title>
      <link>/post/tidylocations/</link>
      <pubDate>Wed, 03 Jan 2018 00:00:00 +0100</pubDate>
      
      <guid>/post/tidylocations/</guid>
      <description>A few days ago I stumbled upon an instagram user who created a cool map of his geolocations. You can get his code here. I had to reproduce these cool maps myself and why not also make a blogpost while doing so?
The code for this blogpost can be found in this GitHub Repository.
Getting Started
First I need my geolocation data. If you use Google and own an Android cell phone, you can download yours here.</description>
    </item>
    
  </channel>
</rss>