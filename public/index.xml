<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>favstats - personal blog on favstats - personal blog</title>
    <link>/</link>
    <description>Recent content in favstats - personal blog on favstats - personal blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2019 Fabio Votta</copyright>
    <lastBuildDate>Mon, 25 Dec 2017 00:00:00 +0100</lastBuildDate>
    <atom:link href="/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Guilty Verdict for Murder of George Floyd</title>
      <link>/post/georgefloyd/</link>
      <pubDate>Wed, 21 Apr 2021 00:00:00 +0200</pubDate>
      
      <guid>/post/georgefloyd/</guid>
      <description>&lt;p&gt;Derek Chauvin has been found guilty on all counts for the murder of George Floyd. Without a doubt, today was an important day for justice &amp;amp; a step in the right direction. But so much more is left to do for sustained change and I hope this can be a turning point.&lt;/p&gt;

&lt;p&gt;Because I love data visualization, I collected some data for this occassion to show the moment that Twitter found out about the guilty verdict:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://pbs.twimg.com/media/EzdMGlGWYAIu0sG?format=png&amp;amp;name=900x900&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;At it&amp;rsquo;s peak, ~1500 tweets were send out per second.&lt;/p&gt;

&lt;p&gt;Here is the entire Twitter dataset I collected during the guilty verdict (ca. 2.3 million tweets in ~an hour)&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://pbs.twimg.com/media/EzdPnEbWQAAfWLu?format=png&amp;amp;name=900x900&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;If you are interested in that sort of stuff: here are the most ratio&amp;rsquo;d tweets at time of collection.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://pbs.twimg.com/media/EzdTD83XMAES4f6?format=jpg&amp;amp;name=large&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>2020 Democratic Debates dataset</title>
      <link>/post/demdebates/</link>
      <pubDate>Thu, 13 Feb 2020 00:00:00 +0100</pubDate>
      
      <guid>/post/demdebates/</guid>
      <description>

&lt;p&gt;For anyone who is interested in exploring the Democratic primary debates
of the U.S. Presidential Election, I compiled a dataset with all debates
so far (i.e.: 8).&lt;/p&gt;

&lt;p&gt;In the following blog post I will introduce the R package
&lt;code&gt;demdebates2020&lt;/code&gt; which will be updated to include data from all
Democratic debates as they are held. Further, I will present some
possible use-cases and an exploratory analysis of the debates.&lt;/p&gt;

&lt;h2 id=&#34;start&#34;&gt;Start&lt;/h2&gt;

&lt;p&gt;First, I load in some packages.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Install these packages if you don&#39;t have them yet
# if (!require(&amp;quot;pacman&amp;quot;)) install.packages(&amp;quot;pacman&amp;quot;)
# devtools::install_github(&amp;quot;favstats/demdebates2020&amp;quot;)

pacman::p_load(tidyverse,       # powerful data wrangling (and so much more)
               knitr,           # for tables
               extrafont,       # extra fonts
               ggtext,          # markdown in ggplot!
               rvest,           # for emoji scraping 
               tidytext,        # text processing
               demdebates2020,  # democratic debates datasets
               ggthemes,        # custom themes
               scales)          # for prettying up plot labels
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To liven things up (and as a personal learning opportunity) I will use
the great &lt;a href=&#34;https://github.com/wilkelab/ggtext&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;ggtext&lt;/code&gt;&lt;/a&gt; package and
include some emojis in the graphs to come.&lt;/p&gt;

&lt;p&gt;I will now present the main dataset: &lt;code&gt;debates&lt;/code&gt;. This dataset represents
the spoken words of all Democratic candidates for US president at eight
Democratic debates. The following
&lt;a href=&#34;https://github.com/favstats/demdebates2020#sources&#34; target=&#34;_blank&#34;&gt;sources&lt;/a&gt; have been
used to compile the data: Washington Post, Des Moines Register and
rev.com. The dataset has the following eight columns:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;speaker&lt;/code&gt;: Who is speaking&lt;/li&gt;
&lt;li&gt;&lt;code&gt;background&lt;/code&gt;: Reactions from the audience, includes &lt;code&gt;(APPLAUSE)&lt;/code&gt; or
&lt;code&gt;(LAUGHTER)&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;only availabe for the first seven debates&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;speech&lt;/code&gt;: Transcribed speech&lt;/li&gt;
&lt;li&gt;&lt;code&gt;type&lt;/code&gt;: Candidate, Moderator or Protester&lt;/li&gt;
&lt;li&gt;&lt;code&gt;gender&lt;/code&gt;: The gender of the person speaking&lt;/li&gt;
&lt;li&gt;&lt;code&gt;debate&lt;/code&gt;: Which debate&lt;/li&gt;
&lt;li&gt;&lt;code&gt;day&lt;/code&gt;: Which day of the debate

&lt;ul&gt;
&lt;li&gt;first and second debate were held on two separate days&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;order&lt;/code&gt;: The order in which the speech acts were delivered&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are two ways in which you can access the dataset.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Read .csv file directly from GitHub&lt;/li&gt;
&lt;/ol&gt;

&lt;!-- end list --&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;debates_url &amp;lt;- &amp;quot;https://raw.githubusercontent.com/favstats/demdebates2020/master/data/debates.csv&amp;quot;

debates &amp;lt;- readr::read_csv(debates_url)
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;Install and load the R package like this:&lt;/li&gt;
&lt;/ol&gt;

&lt;!-- end list --&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;devtools::install_github(&amp;quot;favstats/demdebates2020&amp;quot;)

library(demdebates2020)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is how the dataset looks like:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;demdebates2020::debates %&amp;gt;% 
  dplyr::slice(1502:1510) %&amp;gt;% 
  knitr::kable()
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;speaker&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;background&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;speech&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;type&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;gender&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;debate&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;day&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;order&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Bernie Sanders&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;NA&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;One of the differences - one of the differences that Joe and I have in our record is Joe voted for that war, I helped lead the opposition to that war, which was a total disaster.&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Candidate&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;male&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;759&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Bernie Sanders&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;(APPLAUSE)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;NA&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Candidate&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;male&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;760&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Bernie Sanders&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;NA&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Second of all, I helped lead the effort for the first time to utilize the War Powers Act to get the United States out of the Saudi-led intervention in Yemen, which is the most horrific humanitarian disaster on Earth.&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Candidate&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;male&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;761&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;If you want to explore applause or laughter that candidates received,
then you can take a look at the &lt;code&gt;background&lt;/code&gt; variable.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; as of now, &lt;code&gt;backgound&lt;/code&gt; is only available for Democratic
debates 1 through 7. I couldn’t find a transcript source that recorded
applause or laughter for the 8th debate. If you have a source, please
feel free to contact me and I am happy to add it!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;who-received-the-most-applause&#34;&gt;Who received the most applause?&lt;/h2&gt;

&lt;p&gt;We can use the &lt;code&gt;background&lt;/code&gt; variable to see who received the most
applause.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;## check out who received Applause
debates %&amp;gt;% 
  filter(background == &amp;quot;(APPLAUSE)&amp;quot;) %&amp;gt;% 
  dplyr::count(speaker, sort = T) %&amp;gt;% 
  slice(1:10) %&amp;gt;% 
  knitr::kable()
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;speaker&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;n&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Bernie Sanders&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;73&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Elizabeth Warren&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;65&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Joe Biden&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;48&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Pete Buttigieg&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;47&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Kamala Harris&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;44&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Andrew Yang&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;39&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Cory Booker&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;36&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Julian Castro&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;36&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Amy Klobuchar&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;32&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Beto O’Rourke&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;22&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Looks like Bernie Sanders received the most applause.&lt;/p&gt;

&lt;p&gt;We can also create a data visualization to better emphasize the
differences.&lt;/p&gt;

&lt;p&gt;As mentioned before I will use emojis in the graphs to liven things up.
In order to so, I use two functions from the great blogpost &lt;a href=&#34;https://www.hvitfeldt.me/blog/real-emojis-in-ggplot2/&#34; target=&#34;_blank&#34;&gt;Real emojis
in ggplot2&lt;/a&gt; by
Emil Hvitfeldt.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;emoji_to_link &amp;lt;- function(x) {
  paste0(&amp;quot;https://emojipedia.org/emoji/&amp;quot;,x) %&amp;gt;%
    read_html() %&amp;gt;%
    html_nodes(&amp;quot;tr td a&amp;quot;) %&amp;gt;%
    .[1] %&amp;gt;%
    html_attr(&amp;quot;href&amp;quot;) %&amp;gt;%
    paste0(&amp;quot;https://emojipedia.org/&amp;quot;, .) %&amp;gt;%
    read_html() %&amp;gt;%
    html_node(&#39;div[class=&amp;quot;vendor-image&amp;quot;] img&#39;) %&amp;gt;%
    html_attr(&amp;quot;src&amp;quot;)
}

link_to_img &amp;lt;- function(x, size = 20) {
  paste0(&amp;quot;&amp;lt;img src=&#39;&amp;quot;, x, &amp;quot;&#39; width=&#39;&amp;quot;, size, &amp;quot;&#39;/&amp;gt;&amp;quot;)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next, I get the emoji link for 👏&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;clap_emoji &amp;lt;- emoji_to_link(&amp;quot;👏&amp;quot;) %&amp;gt;% link_to_img()

clap_emoji
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;&amp;lt;img src=&#39;https://emojipedia-us.s3.dualstack.us-west-1.amazonaws.com/thumbs/120/apple/237/clapping-hands-sign_1f44f.png&#39; width=&#39;20&#39;/&amp;gt;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And I can include that in a graph:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;## load fonts
loadfonts(device = &amp;quot;win&amp;quot;)

debates %&amp;gt;% 
  dplyr::count(background, speaker, type, sort = T) %&amp;gt;% 
  drop_na() %&amp;gt;% 
  filter(background == &amp;quot;(APPLAUSE)&amp;quot;) %&amp;gt;% 
  mutate(speaker = fct_reorder(speaker, n)) %&amp;gt;% 
  mutate(type = paste0(type, &amp;quot;s&amp;quot;)) %&amp;gt;% 
  ggplot(aes(speaker, n)) +
  geom_col(aes(fill = type), width = 0.5) +
  coord_flip() +
  ggthemes::theme_hc() +
  geom_label(aes(label = n), size = 3) +
  facet_wrap(~type, scales = &amp;quot;free&amp;quot;) +
  ggthemes::scale_fill_gdocs() +
  theme(
    text = element_text(family = &amp;quot;Fira Code Retina&amp;quot;),
    legend.position = &amp;quot;none&amp;quot;, 
    plot.title = element_markdown(hjust = 0.5, size = 30, margin=margin(0,0,15,0), face = &amp;quot;bold&amp;quot;)
    ) +
  labs(x = &amp;quot;&amp;quot;, y = &amp;quot;Applause&amp;quot;, title = &amp;quot;Who got the &amp;lt;span style=&#39;color: #3E7ACF&#39;&amp;gt;most Applause&amp;lt;/span&amp;gt;&amp;lt;img src=&#39;https://emojipedia-us.s3.dualstack.us-west-1.amazonaws.com/thumbs/120/apple/237/clapping-hands-sign_1f44f.png&#39; width=&#39;20&#39;/&amp;gt;&amp;lt;br&amp;gt;in Democratic Debates?&amp;quot;,
       caption = &amp;quot;\nDemocratic Debates: 1 - 7\nData Visualization: @favstats\nSource: Transcripts by Washington Post &amp;amp; Des Moines Register&amp;quot;) 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/favstats/demdebates2020/master/vignettes/images/applause.png&#34; alt=&#34;&#34; /&gt;&lt;!-- --&gt;&lt;/p&gt;

&lt;p&gt;We can also plot the same data as a heatmap across debates:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;debates %&amp;gt;% 
  filter(background == &amp;quot;(APPLAUSE)&amp;quot;) %&amp;gt;% 
  filter(type == &amp;quot;Candidate&amp;quot;) %&amp;gt;% 
  mutate(speaker = as.factor(speaker)) %&amp;gt;% 
  mutate(debate = as.factor(debate)) %&amp;gt;% 
  dplyr::count(background, speaker, debate, .drop = F) %&amp;gt;% 
  drop_na() %&amp;gt;% 
  mutate(speaker = fct_reorder(speaker, n)) %&amp;gt;% 
  ggplot(aes(debate, speaker, fill = n)) +
  geom_tile() +
  scale_fill_gradient(&amp;quot;Applause&amp;quot;, low = &amp;quot;white&amp;quot;) +
  theme_classic() +
  theme(
    text = element_text(family = &amp;quot;Fira Code Retina&amp;quot;),
    plot.title = element_markdown(hjust = 0.5, size = 30, margin=margin(0,0,15,0), face = &amp;quot;bold&amp;quot;)
    ) +
  labs(x = &amp;quot;Debate&amp;quot;, y = &amp;quot;&amp;quot;, title = &amp;quot;Who got the &amp;lt;span style=&#39;color: #3E7ACF&#39;&amp;gt;most Applause&amp;lt;/span&amp;gt;&amp;lt;img src=&#39;https://emojipedia-us.s3.dualstack.us-west-1.amazonaws.com/thumbs/120/apple/237/clapping-hands-sign_1f44f.png&#39; width=&#39;20&#39;/&amp;gt;&amp;lt;br&amp;gt;in Democratic Debates?&amp;quot;,
       caption = &amp;quot;\nDemocratic Debates: 1 - 7\nData Visualization: @favstats\nSource: Transcripts by Washington Post &amp;amp; Des Moines Register&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/favstats/demdebates2020/master/vignettes/images/applause_heat.png&#34; alt=&#34;&#34; /&gt;&lt;!-- --&gt;&lt;/p&gt;

&lt;h2 id=&#34;who-was-the-greatest-jokester-at-democratic-debates&#34;&gt;Who was the greatest jokester at democratic debates?&lt;/h2&gt;

&lt;p&gt;We can also take a look at who received the most laughs during the
debates. Just filter &lt;code&gt;background&lt;/code&gt; by &lt;code&gt;(LAUGHTER)&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;debates %&amp;gt;% 
  filter(background == &amp;quot;(LAUGHTER)&amp;quot;) %&amp;gt;% 
  dplyr::count(speaker, sort = T) %&amp;gt;% 
  drop_na() %&amp;gt;% 
  slice(1:10) %&amp;gt;% 
  knitr::kable()
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;speaker&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;n&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Bernie Sanders&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;14&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Amy Klobuchar&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;13&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Andrew Yang&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;13&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Joe Biden&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Elizabeth Warren&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Cory Booker&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;7&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Pete Buttigieg&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Kamala Harris&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Chuck Todd&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Jay Inslee&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Again, Bernie Sanders leads the field, closely followed by Andrew Yang
(now dropped out) and Amy Klobuchar.&lt;/p&gt;

&lt;p&gt;We can visualize the data to get a better understanding. With the same process as before, I get the emoji link for 😂&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;laugh_emoji &amp;lt;- emoji_to_link(&amp;quot;😂&amp;quot;) %&amp;gt;% link_to_img()

laugh_emoji
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;&amp;lt;img src=&#39;https://emojipedia-us.s3.dualstack.us-west-1.amazonaws.com/thumbs/120/apple/237/face-with-tears-of-joy_1f602.png&#39; width=&#39;20&#39;/&amp;gt;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And I can include that in a graph:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;debates %&amp;gt;% 
  filter(background == &amp;quot;(LAUGHTER)&amp;quot;) %&amp;gt;% 
  dplyr::count(background, speaker, type, sort = T) %&amp;gt;% 
  drop_na() %&amp;gt;% 
  mutate(speaker = fct_reorder(speaker, n)) %&amp;gt;% 
  ggplot(aes(speaker, n)) +
  geom_col(aes(fill = type), width = 0.5) +
  # geom_point(aes(fill = type), size = 9) +
  coord_flip() +
  ggthemes::theme_hc() +
  geom_label(aes(label = n), size = 3) +
  # facet_grid(~type, scales = &amp;quot;free_x&amp;quot;, space = &amp;quot;free&amp;quot;) +
  ggthemes::scale_fill_gdocs() +
  theme(
    text = element_text(family = &amp;quot;Fira Code Retina&amp;quot;),
    legend.position = &amp;quot;none&amp;quot;, 
    plot.title = element_markdown(size = 30, margin=margin(0,0,15,0), face = &amp;quot;bold&amp;quot;)
    ) +
  labs(x = &amp;quot;&amp;quot;, y = &amp;quot;Laughs&amp;quot;, title = &amp;quot;Who got the &amp;lt;span style=&#39;color: #3E7ACF&#39;&amp;gt;most Laughs&amp;lt;/span&amp;gt;&amp;lt;img src=&#39;https://emojipedia-us.s3.dualstack.us-west-1.amazonaws.com/thumbs/120/apple/237/face-with-tears-of-joy_1f602.png&#39; width=&#39;20&#39;/&amp;gt;&amp;lt;br&amp;gt;in Democratic Debates?&amp;quot;,
       caption = &amp;quot;\nDemocratic Debates: 1 - 7\nData Visualization: @favstats\nSource: Transcripts by Washington Post &amp;amp; Des Moines Register&amp;quot;) 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/favstats/demdebates2020/master/vignettes/images/laughs.png&#34; alt=&#34;&#34; /&gt;&lt;!-- --&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;tidytemplate::ggsave_it(laughs, width = 8, height = 8)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can also plot the same data as a heatmap across debates:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;debates %&amp;gt;% 
  filter(background == &amp;quot;(LAUGHTER)&amp;quot;) %&amp;gt;% 
  filter(type == &amp;quot;Candidate&amp;quot;) %&amp;gt;% 
  mutate(speaker = as.factor(speaker)) %&amp;gt;% 
  mutate(debate = as.factor(debate)) %&amp;gt;% 
  dplyr::count(background, speaker, debate, .drop = F) %&amp;gt;% 
  drop_na() %&amp;gt;% 
  mutate(speaker = fct_reorder(speaker, n)) %&amp;gt;% 
  ggplot(aes(debate, speaker, fill = n)) +
  geom_tile() +
  scale_fill_gradient(&amp;quot;Laughs&amp;quot;, low = &amp;quot;white&amp;quot;) +
  theme_classic() +
  theme(
    text = element_text(family = &amp;quot;Fira Code Retina&amp;quot;),
    plot.title = element_markdown(hjust = 0.5, size = 30, margin=margin(0,0,15,0), face = &amp;quot;bold&amp;quot;)
    ) +
  labs(x = &amp;quot;Debate&amp;quot;, y = &amp;quot;&amp;quot;, title = &amp;quot;Who got the &amp;lt;span style=&#39;color: #3E7ACF&#39;&amp;gt;most Laughs&amp;lt;/span&amp;gt;&amp;lt;img src=&#39;https://emojipedia-us.s3.dualstack.us-west-1.amazonaws.com/thumbs/120/apple/237/face-with-tears-of-joy_1f602.png&#39; width=&#39;20&#39;/&amp;gt;&amp;lt;br&amp;gt;in Democratic Debates?&amp;quot;,
       caption = &amp;quot;\nDemocratic Debates: 1 - 7\nData Visualization: @favstats\nSource: Transcripts by Washington Post &amp;amp; Des Moines Register&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/favstats/demdebates2020/master/vignettes/images/laughs_heat.png&#34; alt=&#34;&#34; /&gt;&lt;!-- --&gt;&lt;/p&gt;

&lt;h2 id=&#34;who-spoke-the-most-words&#34;&gt;Who spoke the most words?&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;debates %&amp;gt;% 
  unnest_tokens(word, speech) %&amp;gt;% 
  filter(type == &amp;quot;Candidate&amp;quot;) %&amp;gt;%
  mutate(speaker = as.factor(speaker)) %&amp;gt;% 
  mutate(debate = as.factor(debate)) %&amp;gt;% 
  dplyr::count(speaker, .drop = F, sort = T) %&amp;gt;% 
  mutate(total = sum(n)) %&amp;gt;% 
  mutate(perc = round(n / total*100, 2)) %&amp;gt;% 
  slice(1:10) %&amp;gt;% 
  knitr::kable()
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;speaker&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;n&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;total&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;perc&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Joe Biden&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;25295&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;201653&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12.54&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Elizabeth Warren&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;22473&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;201653&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;11.14&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Pete Buttigieg&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;21400&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;201653&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;10.61&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Amy Klobuchar&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;20076&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;201653&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9.96&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Bernie Sanders&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;19065&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;201653&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9.45&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Kamala Harris&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12128&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;201653&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6.01&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Cory Booker&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;11839&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;201653&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5.87&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Andrew Yang&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;10586&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;201653&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5.25&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Tom Steyer&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9635&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;201653&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4.78&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Beto O’Rourke&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8253&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;201653&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4.09&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;In the Top 10 we see candidates who were present in each debate (for example Joe Biden, Elizabeth Warren and Bernie Sanders). Out of a share of all spoken words during all eight debates, Joe Biden spoke a plurality of words. Tom Steyer (as of writing still in the race) has less than half as many spoken words as most other candidates still in the race, despite being present in 5 out of 8 debates.&lt;/p&gt;

&lt;p&gt;Again, we can also visualize the data.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;speak_emoji &amp;lt;- emoji_to_link(&amp;quot;🗣&amp;quot;) %&amp;gt;% link_to_img()

speak_emoji
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;&amp;lt;img src=&#39;https://emojipedia-us.s3.dualstack.us-west-1.amazonaws.com/thumbs/120/apple/237/speaking-head-in-silhouette_1f5e3.png&#39; width=&#39;20&#39;/&amp;gt;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;debate_words &amp;lt;- debates %&amp;gt;% 
  unnest_tokens(word, speech) %&amp;gt;% 
  filter(type == &amp;quot;Candidate&amp;quot;) %&amp;gt;%
  mutate(speaker = as.factor(speaker)) %&amp;gt;% 
  mutate(debate = as.factor(debate)) %&amp;gt;% 
  dplyr::count(speaker, debate, .drop = F, sort = T) 

# frontrunners &amp;lt;- c(&amp;quot;Bernie Sanders&amp;quot;, 
#                   &amp;quot;Elizabeth Warren&amp;quot;, 
#                   &amp;quot;Joe Biden&amp;quot;, 
#                   &amp;quot;Pete Buttigieg&amp;quot;, 
#                   &amp;quot;Amy Klobuchar&amp;quot;)



debate_words %&amp;gt;% 
  mutate(speaker = fct_reorder(speaker, n)) %&amp;gt;% 
  ggplot(aes(debate, speaker, fill = n)) +
  geom_tile() +
  scale_fill_gradient(&amp;quot;Words&amp;quot;, low = &amp;quot;white&amp;quot;) +
  theme_classic() +
  theme(
    text = element_text(family = &amp;quot;Fira Code Retina&amp;quot;),
    plot.title = element_markdown(hjust = 0.5, size = 30, margin=margin(0,0,15,0), face = &amp;quot;bold&amp;quot;)
    ) +
  labs(x = &amp;quot;Debate&amp;quot;, y = &amp;quot;&amp;quot;, title = &amp;quot;Who spoke the &amp;lt;span style=&#39;color: #3E7ACF&#39;&amp;gt;most Words&amp;lt;/span&amp;gt;&amp;lt;img src=&#39;https://emojipedia-us.s3.dualstack.us-west-1.amazonaws.com/thumbs/120/apple/237/speaking-head-in-silhouette_1f5e3.png&#39; width=&#39;20&#39;/&amp;gt;&amp;lt;br&amp;gt;in Democratic Debates?&amp;quot;,
       caption = &amp;quot;\nDemocratic Debates: 1 - 8\nData Visualization: @favstats\nSource: Transcripts by Washington Post &amp;amp; Des Moines Register&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/favstats/demdebates2020/master/vignettes/images/spoken_words.png&#34; alt=&#34;&#34; /&gt;&lt;!-- --&gt;&lt;/p&gt;

&lt;p&gt;We see something very obvious: as the number of candidates decreases,
the spoken words also increase for the remaining candidates (as they
have to fill the space). Numbers remain rather low for Tom Steyer and Andrew Yang throughout the debates.&lt;/p&gt;

&lt;h2 id=&#34;did-men-speak-more-than-women&#34;&gt;Did men speak more than women?&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;debate_gender &amp;lt;- debates %&amp;gt;% 
  unnest_tokens(word, speech) %&amp;gt;% 
  filter(type == &amp;quot;Candidate&amp;quot;) %&amp;gt;%
  dplyr::count(gender, debate, .drop = F) %&amp;gt;% 
  group_by(debate) %&amp;gt;% 
  mutate(total = sum(n)) %&amp;gt;% 
  mutate(perc = n/total)

debate_gender %&amp;gt;% 
  filter(gender == &amp;quot;female&amp;quot;) %&amp;gt;%
  ggplot(aes(debate, perc, fill = gender)) +
  geom_area(fill = &amp;quot;#3E7ACF&amp;quot;, alpha = 0.75) +
  ggrepel::geom_text_repel(aes(label = paste0(round(perc*100, 1), &amp;quot;%&amp;quot;)), nudge_y = 0.025,
                           direction = &amp;quot;y&amp;quot;) +
  scale_y_continuous(labels = scales::percent, limits = c(0, 0.5)) +
  ggthemes::theme_hc()  +
  theme(
    text = element_text(family = &amp;quot;Fira Code Retina&amp;quot;),
    legend.position = &amp;quot;top&amp;quot;,
    plot.title = element_markdown(size = 25, margin=margin(0,0,15,0), face = &amp;quot;bold&amp;quot;)
    ) +
  labs(x = &amp;quot;&amp;quot;, y = &amp;quot;% Spoken Words by Women\n&amp;quot;, title = &amp;quot;Share of spoken Words by &amp;lt;span style=&#39;color: #3E7ACF&#39;&amp;gt;Women&amp;lt;/span&amp;gt;&amp;lt;br&amp;gt;during the Democratic Debates&amp;quot;,
       caption = &amp;quot;\nDemocratic Debates: 1 - 8\nData Visualization: @favstats\nSource: Transcripts by Washington Post &amp;amp; Des Moines Register&amp;quot;) +
  scale_x_continuous(breaks = 1:8)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/favstats/demdebates2020/master/vignettes/images/spoken_words_gender.png&#34; alt=&#34;&#34; /&gt;&lt;!-- --&gt;&lt;/p&gt;

&lt;p&gt;Men have spoken more words than women across all debates. Of course,
throughout the debates women were always in the minority (only 6 out of
22 Democratic candidates were women and now only 2 are left: Amy
Klobuchar and Elizabeth Warren).&lt;/p&gt;

&lt;h2 id=&#34;what-were-the-most-common-distinct-words-used-by-candidates&#34;&gt;What were the most common distinct words used by candidates?&lt;/h2&gt;

&lt;p&gt;We can use tf-idf scores to tell what word combinations (bigrams)
candidates used the most and also were most distinct across other
candidates.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;speaker_words &amp;lt;- debates %&amp;gt;% 
  filter(type == &amp;quot;Candidate&amp;quot;) %&amp;gt;% 
  mutate(speech = tm::removeWords(str_to_lower(speech), stop_words$word)) %&amp;gt;% 
  unnest_tokens(word, speech, token = &amp;quot;ngrams&amp;quot;, n = 2) %&amp;gt;%
  count(speaker, word, sort = TRUE)
  
total_words &amp;lt;- speaker_words %&amp;gt;% 
  group_by(speaker) %&amp;gt;% 
  summarize(total = sum(n))


speaker_words &amp;lt;- left_join(speaker_words, total_words)


speaker_words &amp;lt;- speaker_words %&amp;gt;% 
  bind_tf_idf(word, speaker, n)



speaker_words %&amp;gt;%
  arrange(desc(tf_idf)) %&amp;gt;%
  filter(speaker %in% c(&amp;quot;Bernie Sanders&amp;quot;, &amp;quot;Elizabeth Warren&amp;quot;,
                        &amp;quot;Joe Biden&amp;quot;, &amp;quot;Pete Buttigieg&amp;quot;, 
                        &amp;quot;Andrew Yang&amp;quot;, &amp;quot;Amy Klobuchar&amp;quot;)) %&amp;gt;%
  group_by(speaker) %&amp;gt;% 
  arrange(desc(tf_idf)) %&amp;gt;% 
  slice(1:15) %&amp;gt;% 
  ungroup() %&amp;gt;%
  mutate(word = factor(word, levels = rev(unique(word)))) %&amp;gt;% 
  ggplot(aes(word, tf_idf, fill = speaker)) +
  geom_col(show.legend = FALSE) +
  labs(x = NULL, y = &amp;quot;tf-idf&amp;quot;) +
  facet_wrap(~speaker, ncol = 3, scales = &amp;quot;free&amp;quot;) +
  coord_flip()   +
  ggthemes::theme_hc() +
  # facet_grid(~type, scales = &amp;quot;free_x&amp;quot;, space = &amp;quot;free&amp;quot;) +
  ggthemes::scale_fill_colorblind() +
  theme(
    text = element_text(family = &amp;quot;Fira Code Retina&amp;quot;),
    legend.position = &amp;quot;top&amp;quot;,
    plot.title = element_markdown(size = 30, margin=margin(0,0,20,0), face = &amp;quot;bold&amp;quot;, hjust = 0.5)
    ) +
  labs(x = &amp;quot;&amp;quot;, y = &amp;quot;tf-idf&amp;quot;, title = &amp;quot;Most Common Distinct Word Combinations&amp;lt;br&amp;gt;for each Democratic Presidential Candidate&amp;quot;,
       caption = &amp;quot;\nDemocratic Debates: 1 - 8\nData Visualization: @favstats\nSource: Transcripts by Washington Post &amp;amp; Des Moines Register&amp;quot;) 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/favstats/demdebates2020/master/vignettes/images/tfidfplot.png&#34; alt=&#34;&#34; /&gt;&lt;!-- --&gt;&lt;/p&gt;

&lt;p&gt;Some fitting and recognizable word patterns emerge. For exampe, Andrew Yang and his proposal for Universal Basic Income (UBI) clearly distinguish him from other candidates with his most common distinct words referring to the &amp;ldquo;freedom dividend&amp;rdquo; and &amp;ldquo;1000 [dollars a] month&amp;rdquo;. A similar distinct pattern emerges with Bernie Sanders who frequently uses the phrase &amp;ldquo;The US is the only &lt;em&gt;major country on earth&lt;/em&gt; that does/does not have X&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;In conclusio&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;So far from me. What kind of analysis would you run on the Democratic debates data? Feel free to use the data as you wish and I am curious to see what comes out of it!&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;sessionInfo()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## R version 3.6.1 (2019-07-05)
## Platform: x86_64-w64-mingw32/x64 (64-bit)
## Running under: Windows 10 x64 (build 18362)
## 
## Matrix products: default
## 
## locale:
## [1] LC_COLLATE=English_Germany.1252  LC_CTYPE=English_Germany.1252   
## [3] LC_MONETARY=English_Germany.1252 LC_NUMERIC=C                    
## [5] LC_TIME=English_Germany.1252    
## 
## attached base packages:
## [1] stats     graphics  grDevices utils     datasets  methods   base     
## 
## other attached packages:
##  [1] scales_1.1.0              ggthemes_4.2.0           
##  [3] demdebates2020_0.0.0.9000 tidytext_0.2.2           
##  [5] rvest_0.3.4               xml2_1.2.2               
##  [7] ggtext_0.1.0              extrafont_0.17           
##  [9] knitr_1.25                forcats_0.4.0            
## [11] stringr_1.4.0             dplyr_0.8.3              
## [13] purrr_0.3.3               readr_1.3.1              
## [15] tidyr_1.0.0               tibble_2.1.3             
## [17] ggplot2_3.2.1             tidyverse_1.2.1          
## 
## loaded via a namespace (and not attached):
##  [1] httr_1.4.1         jsonlite_1.6       modelr_0.1.5      
##  [4] assertthat_0.2.1   highr_0.8          tidytemplate_0.1.0
##  [7] selectr_0.4-1      cellranger_1.1.0   slam_0.1-45       
## [10] yaml_2.2.0         ggrepel_0.8.1      Rttf2pt1_1.3.7    
## [13] pillar_1.4.3       backports_1.1.5    lattice_0.20-38   
## [16] glue_1.3.1         extrafontdb_1.0    digest_0.6.23     
## [19] gridtext_0.1.0     colorspace_1.4-1   htmltools_0.4.0   
## [22] Matrix_1.2-17      tm_0.7-7           pkgconfig_2.0.3   
## [25] broom_0.5.2        haven_2.1.1        generics_0.0.2    
## [28] farver_2.0.1       ellipsis_0.3.0     pacman_0.5.1      
## [31] withr_2.1.2        lazyeval_0.2.2     NLP_0.2-0         
## [34] cli_2.0.0          magrittr_1.5       crayon_1.3.4      
## [37] readxl_1.3.1       evaluate_0.14      tokenizers_0.2.1  
## [40] janeaustenr_0.1.5  fansi_0.4.0        nlme_3.1-140      
## [43] SnowballC_0.6.0    tools_3.6.1        hms_0.5.2         
## [46] lifecycle_0.1.0    munsell_0.5.0      compiler_3.6.1    
## [49] rlang_0.4.1        grid_3.6.1         RCurl_1.95-4.12   
## [52] rstudioapi_0.10    bitops_1.0-6       labeling_0.3      
## [55] rmarkdown_1.14     gtable_0.3.0       curl_4.2          
## [58] markdown_1.1       R6_2.4.1           lubridate_1.7.4   
## [61] zeallot_0.1.0      stringi_1.4.3      parallel_3.6.1    
## [64] Rcpp_1.0.3         vctrs_0.2.1        png_0.1-7         
## [67] tidyselect_0.2.5   xfun_0.10
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Slides: Hacking Germany’s Official Statistics with datenguideR</title>
      <link>/project/dg_slides/</link>
      <pubDate>Wed, 05 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>/project/dg_slides/</guid>
      <description></description>
    </item>
    
    <item>
      <title>The &#39;Greatest Deliberative Body in the World&#39;?</title>
      <link>/post/greatest_body/</link>
      <pubDate>Thu, 30 Jan 2020 00:00:00 +0100</pubDate>
      
      <guid>/post/greatest_body/</guid>
      <description>

&lt;p&gt;The U.S. Senate is the &amp;ldquo;greatest deliberative body in the world&amp;rdquo;. A common phrase last used by Chief Justice John Roberts during the Impeachment Trial. But what does the data say?&lt;/p&gt;

&lt;p&gt;I am not aware of a measure that looks at individual parliamentary bodies but &lt;a href=&#34;https://www.v-dem.net/en/&#34; target=&#34;_blank&#34;&gt;V-Dem&lt;/a&gt; has expert ratings on the deliberative quality of political elites by country, which may serve as a proxy.&lt;/p&gt;

&lt;h2 id=&#34;packages&#34;&gt;Packages&lt;/h2&gt;

&lt;p&gt;First, let&amp;rsquo;s load some necessary packages.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Install these packages if you don&#39;t have them yet
# if (!require(&amp;quot;pacman&amp;quot;)) install.packages(&amp;quot;pacman&amp;quot;)
# devtools::install_github(&amp;quot;favstats/tidytemplate&amp;quot;)

pacman::p_load(tidyverse, tidytemplate, ggtext)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;load-data&#34;&gt;Load Data&lt;/h2&gt;

&lt;p&gt;Let&amp;rsquo;s load in the V-Dem data.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;vdem &amp;lt;- readr::read_rds(&amp;quot;data/V-Dem-CY-Full+Others-v9.rds&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So what does the data say? There are many sub-dimensions to deliberation but here we are going to focus on one of them: &amp;ldquo;respecting counter-arguments&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/img/vdem_info.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;A map of the most recent data (2018) reveals that the US is not the &amp;ldquo;greatest&amp;rdquo; when it comes to deliberation.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;world_dat &amp;lt;- ggplot2::map_data(&amp;quot;world&amp;quot;)


delib_map &amp;lt;- vdem %&amp;gt;% 
  filter(year == 2018) %&amp;gt;%
  mutate(v2dlcountr = v2dlcountr_mean) %&amp;gt;% 
  select(v2dlcountr, country_name, year) %&amp;gt;%
  mutate(v2dlcountr = round(v2dlcountr) %&amp;gt;% as.factor) %&amp;gt;% 
  mutate(region = countrycode::countrycode(country_name, &amp;quot;country.name&amp;quot;, &amp;quot;country.name&amp;quot;)) %&amp;gt;% 
  right_join(
    world_dat %&amp;gt;% 
      mutate(region = countrycode::countrycode(region, &amp;quot;country.name&amp;quot;, &amp;quot;country.name&amp;quot;))
    ) 


delib_map %&amp;gt;% 
  # filter(is.na(v2dlcountr)) %&amp;gt;% 
  filter(region != &amp;quot;Antarctica&amp;quot;) %&amp;gt;% 
  filter(region != &amp;quot;Greenland&amp;quot;) %&amp;gt;% 
  arrange(desc(v2dlcountr)) %&amp;gt;% 
  ggplot(aes(long, lat)) +
  geom_polygon(aes( group = group, fill = v2dlcountr),  
               color = &amp;quot;white&amp;quot;, alpha = 0.8, size = 0.2) +
  ggthemes::theme_map() +
  scale_fill_viridis_d(&amp;quot;Respect Counterarguments\n&amp;quot;, 
                       breaks = 0:5, 
                       limits = c(0,1, 2,3,4, 5),
                       labels = c(
                         &amp;quot;0: Counterarguments are not allowed or\nif articulated, punished.&amp;quot;, 
                         &amp;quot;1: Counterarguments are allowed at least from\nsome parties, but almost always are ignored.&amp;quot;, 
                         &amp;quot;2: Elites tend to acknowledge counterarguments\nbut then explicitly degrade them.&amp;quot;, 
                         &amp;quot;3: Elites tend to acknowledge counterarguments\nwithout making explicit negative or positive statements.&amp;quot;, 
                         &amp;quot;4: Elites almost always acknowledge counterarguments,\n even if they ultimately reject them.&amp;quot;, 
                         &amp;quot;5: Elites almost always acknowledge counterarguments\nand even accept them and change their position.&amp;quot;
                         )
                       ) +
  coord_map(xlim=c(-180,180)) +
  labs(title = &amp;quot;Who has the **Greatest Deliberative Body** in the world?&amp;quot;, 
       subtitle = &amp;quot;*Question:* When important policy changes are being considered,&amp;lt;br&amp;gt;to what extent do political elites acknowledge and respect counterarguments?&amp;lt;br&amp;gt;&amp;quot;,
    caption = &amp;quot;Data Source: V-Dem v9 (2018). Data Visualization: @favstats&amp;quot;) +
  theme(
        plot.title = element_markdown(color = &amp;quot;black&amp;quot;,
                                  size = 30, hjust = 0.5),
        plot.subtitle = element_markdown(color = &amp;quot;black&amp;quot;,
                                  size = 15, hjust = 0.5),
        plot.caption = element_text(size = 12),
        legend.position = c(-0.05, 0.075),
    legend.background = element_blank(),
    legend.box.background = element_blank(),
    legend.key = element_blank()
  ) #+ guides(fill = guide_colourbar(barheight = 12))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;/img/delib_map.png&#34; alt=&#34;&#34; /&gt;&lt;!-- --&gt;&lt;/p&gt;

&lt;p&gt;In fact, we have to plot the 100 most deliberative countries in order to even reach the United States on this scale which is rank at 88th place (!). The US ranks more poorly on respecting counterarguments than most European and many developing countries. Why is that the case?&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;vdem %&amp;gt;% 
  select(v2dlcountr_mean, country_name, year) %&amp;gt;% 
  filter(year == 2018) %&amp;gt;%
  arrange(desc(v2dlcountr_mean)) %&amp;gt;%
  slice(1:100) %&amp;gt;%
  mutate(label = ifelse(country_name %in% c(&amp;quot;United States of America&amp;quot;), &amp;quot;US&amp;quot;, &amp;quot;not us&amp;quot;)) %&amp;gt;% 
  mutate(country_name = fct_reorder(country_name, v2dlcountr_mean)) %&amp;gt;% 
  ggplot(aes(country_name, v2dlcountr_mean, fill = label)) +
  geom_col() +
  coord_flip() +
  ggthemes::theme_hc()  +
  ggthemes::scale_fill_colorblind()  +
  labs(title = &amp;quot;Who has the **Greatest Deliberative Body** in the world?&amp;quot;, 
       subtitle = &amp;quot;*Question:* When important policy changes are being considered,&amp;lt;br&amp;gt;to what extent do political elites acknowledge and respect counterarguments?&amp;lt;br&amp;gt;&amp;quot;,
    caption = &amp;quot;\nData Source: V-Dem v9 (2018). Data Visualization: @favstats&amp;quot;, x = &amp;quot;&amp;quot;, y = &amp;quot;\nRespect Counterarguments (0 = No - 5 = Yes, and change minds)&amp;quot;) +
  theme(
        plot.title = element_markdown(color = &amp;quot;black&amp;quot;,
                                  size = 23, hjust = 0.5),
        plot.subtitle = element_markdown(color = &amp;quot;black&amp;quot;,
                                  size = 13, hjust = 0.5),
        plot.caption = element_text(size = 12),
        legend.position = &amp;quot;none&amp;quot;
  ) 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;/img/delib_bars.png&#34; alt=&#34;&#34; /&gt;&lt;!-- --&gt;&lt;/p&gt;

&lt;p&gt;Looking at the data over time may allow us some insights. We can see that the US was actually at a highpoint in 2012.. but 2017 and 2018 have seen the lowest score ever assigned to the US Since 1900 (!). One may argue that the election 2016 may have something to do with this.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;cntry_list &amp;lt;- c(&amp;quot;United States&amp;quot;, &amp;quot;Norway&amp;quot;, &amp;quot;Russia&amp;quot;, &amp;quot;Germany&amp;quot;, &amp;quot;Israel&amp;quot;)

label_dat &amp;lt;- vdem %&amp;gt;% filter(year == 2018) %&amp;gt;%
                              mutate(country_name = ifelse(country_name == &amp;quot;United States of America&amp;quot;, &amp;quot;United States&amp;quot;, country_name)) %&amp;gt;% 
                              filter(country_name %in% cntry_list)

vdem  %&amp;gt;% 
  mutate(country_name = ifelse(country_name == &amp;quot;United States of America&amp;quot;, &amp;quot;United States&amp;quot;, country_name)) %&amp;gt;% 
  select(v2dlcountr_mean, country_name, year) %&amp;gt;% 
  ggplot(aes(year, v2dlcountr_mean, group = country_name)) +
  geom_step(color = &amp;quot;lightgrey&amp;quot;, alpha = 0.5) +
  geom_step(data = vdem %&amp;gt;% 
                mutate(country_name = ifelse(country_name == &amp;quot;United States of America&amp;quot;, &amp;quot;United States&amp;quot;, country_name)) %&amp;gt;% 
              filter(country_name %in% cntry_list), aes(color = country_name), size = 1.2) + 
  ggthemes::theme_hc() +
  scale_x_continuous(breaks = c(1900, 1925, 1950, 1975, 2000, 2018), limits = c(1900, 2024)) +
  ggthemes::scale_color_colorblind(&amp;quot;Country&amp;quot;)  +
  labs(title = &amp;quot;Who has the **Greatest Deliberative Body** in the world?&amp;quot;, 
       subtitle = &amp;quot;*Question:* When important policy changes are being considered,&amp;lt;br&amp;gt;to what extent do political elites acknowledge and respect counterarguments?&amp;quot;,
    caption = &amp;quot;\nData Source: V-Dem v9 (2018). Data Visualization: @favstats&amp;quot;, x = &amp;quot;&amp;quot;, y = &amp;quot;Respect Counterarguments (0 = No - 5 = Yes, and change minds)\n&amp;quot;) +
  theme(
        plot.title = element_markdown(color = &amp;quot;black&amp;quot;,
                                  size = 30, hjust = 0.5),
        plot.subtitle = element_markdown(color = &amp;quot;black&amp;quot;,
                                  size = 15, hjust = 0.5),
        plot.caption = element_text(size = 12),
        legend.position = &amp;quot;none&amp;quot;
  ) +
  geom_text(data = label_dat, aes(x = 2018.5, color = country_name,label = country_name), hjust = 0)  +
  ylim(0, 5)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;/img/us_over_time.png&#34; alt=&#34;&#34; /&gt;&lt;!-- --&gt;&lt;/p&gt;

&lt;p&gt;Looking at the data over time may allow us some insights. We can see that the US was actually at a highpoint in 2012.. but 2017 and 2018 have seen the lowest score ever assigned to the US Since 1900 (!). One may argue that the election 2016 may have something to do with this.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Radical Filter Bubbles: Social Media Personalisation Algorithms and Extremist Content</title>
      <link>/publication/radical_filter_bubbles/</link>
      <pubDate>Fri, 26 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>/publication/radical_filter_bubbles/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Slides: Package Development in R</title>
      <link>/project/rpkgs/</link>
      <pubDate>Sat, 29 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>/project/rpkgs/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Slides: Personalisation Algorithms and Extremist Content Online</title>
      <link>/project/tasm2019/</link>
      <pubDate>Wed, 26 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>/project/tasm2019/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Blog Post: Retaliatory Tariffs and Trump’s Base</title>
      <link>/project/dataforprogress/</link>
      <pubDate>Thu, 23 May 2019 00:00:00 +0000</pubDate>
      
      <guid>/project/dataforprogress/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Game of Thrones ratings</title>
      <link>/post/got_ratings/</link>
      <pubDate>Wed, 22 May 2019 00:00:00 +0200</pubDate>
      
      <guid>/post/got_ratings/</guid>
      <description>

&lt;h2 id=&#34;packages-and-folders&#34;&gt;Packages and Folders&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Install these packages if you don&#39;t have them yet
# if (!require(&amp;quot;pacman&amp;quot;)) install.packages(&amp;quot;pacman&amp;quot;)
# devtools::install_github(&amp;quot;favstats/tidytemplate&amp;quot;)

pacman::p_load(tidyverse, tidytemplate, htmltab, 
               janitor, gameofthrones, extrafont, 
               scales, ggthemes)

# Creates folders
# tidytemplate::data_dir()
# tidytemplate::images_dir()
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;scraping-views-from-wikipedia&#34;&gt;Scraping Views from Wikipedia&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;got_tables &amp;lt;- &amp;quot;https://en.wikipedia.org/wiki/List_of_Game_of_Thrones_episodes&amp;quot;


episode_list &amp;lt;- 2:9 %&amp;gt;% 
  map_dfr(~htmltab(got_tables, .x) %&amp;gt;% mutate(season = .x - 1)) %&amp;gt;% 
  clean_names() %&amp;gt;% 
  mutate_at(vars(no_overall, no_inseason, u_s_viewers_millions), as.numeric) %&amp;gt;% 
  mutate(season = str_glue(&amp;quot;Season {season}&amp;quot;)) %&amp;gt;% 
  mutate(written_by = ifelse(str_detect(written_by, &amp;quot;David Benioff &amp;amp; D. B. Weiss&amp;quot;), &amp;quot;David Benioff &amp;amp; D. B. Weiss&amp;quot;, written_by))  %&amp;gt;% 
  mutate(title = str_remove_all(title, &#39;\\&amp;quot;&#39;))

# ## save data after scraping
save(episode_list, file = &amp;quot;data/episode_list.Rdata&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;views-over-time&#34;&gt;Views over time&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;episode_list %&amp;gt;% 
  ggplot(aes(no_overall, u_s_viewers_millions, fill = season)) +
  geom_col(alpha = 0.9, position = position_dodge(width = 0.1)) +
  ggthemes::theme_hc() +
  scale_fill_got(&amp;quot;&amp;quot;, discrete = T, option = &amp;quot;Targaryen&amp;quot;) +
  scale_x_continuous(breaks = seq(0, 70, 10)) +
  labs(y = &amp;quot;US Viewers in Millions&amp;quot;, 
       x = &amp;quot;Episode Number&amp;quot;, 
       title = &amp;quot;Game of Thrones&amp;quot;, 
       subtitle =  &amp;quot;US viewers  per episode&amp;quot;, 
       caption = &amp;quot;Source: Nielsen Media Research&amp;quot;) +
  guides(fill = guide_legend(nrow = 1)) +
  theme(plot.title = element_text(size = 20, face = &amp;quot;bold&amp;quot;, hjust = 0.5, family = &amp;quot;Game of Thrones&amp;quot;),
        plot.subtitle = element_text(size = 10, hjust = 0.5, family = &amp;quot;Game of Thrones&amp;quot;),
        plot.caption = element_text(size = 8))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/favstats/got_ratings/blob/master/rating_scraper_files/figure-gfm/unnamed-chunk-4-1.png?raw=true&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://github.com/favstats/got_ratings/blob/master/rating_scraper_files/figure-gfm/unnamed-chunk-4-1.png?raw=true&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ggsave_it(season_views, width = 9, height = 5)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;how-many-episodes-were-written-by-which-writer&#34;&gt;How many episodes were written by which writer?&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;episode_list %&amp;gt;% 
  count(written_by, sort = T)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## # A tibble: 5 x 2
##   written_by                      n
##   &amp;lt;chr&amp;gt;                       &amp;lt;int&amp;gt;
## 1 David Benioff &amp;amp; D. B. Weiss    51
## 2 Bryan Cogman                   11
## 3 Dave Hill                       4
## 4 George R. R. Martin             4
## 5 Vanessa Taylor                  3
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;how-many-episodes-were-directed-by-which-director&#34;&gt;How many episodes were directed by which director?&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;episode_list %&amp;gt;% 
  count(directed_by, sort = T)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## # A tibble: 20 x 2
##    directed_by                     n
##    &amp;lt;chr&amp;gt;                       &amp;lt;int&amp;gt;
##  1 David Nutter                    9
##  2 Alan Taylor                     7
##  3 Alex Graves                     6
##  4 Jeremy Podeswa                  6
##  5 Mark Mylod                      6
##  6 Miguel Sapochnik                6
##  7 Daniel Minahan                  5
##  8 Alik Sakharov                   4
##  9 Michelle MacLaren               4
## 10 Brian Kirk                      3
## 11 Daniel Sackheim                 2
## 12 David Petrarca                  2
## 13 Jack Bender                     2
## 14 Matt Shakman                    2
## 15 Michael Slovis                  2
## 16 Neil Marshall                   2
## 17 Tim Van Patten                  2
## 18 D. B. Weiss                     1
## 19 David Benioff                   1
## 20 David Benioff &amp;amp; D. B. Weiss     1
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;scraping-rotten-tomatoes-ratings&#34;&gt;Scraping Rotten Tomatoes Ratings&lt;/h2&gt;

&lt;p&gt;Creating a function to get the ratings&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;get_rotten_ratings &amp;lt;- function(link) {
  
  raw_html &amp;lt;- read_html(link)
  
  rotten_rating &amp;lt;- raw_html %&amp;gt;% 
    html_nodes(&amp;quot;#scoreStats div:nth-child(1)&amp;quot;) %&amp;gt;% 
    html_text() %&amp;gt;% 
    parse_number()
  
  rotten_score &amp;lt;-  raw_html %&amp;gt;% 
    html_nodes(&amp;quot;#tomato_meter_link &amp;gt; span.meter-value.superPageFontColor&amp;quot;) %&amp;gt;% 
    html_text() %&amp;gt;% 
    parse_number()
    
  final_data &amp;lt;- tibble(rotten_rating, rotten_score)
  
  return(final_data)
  
}


episode_ratings &amp;lt;- episode_list %&amp;gt;% 
  mutate(season = str_replace(season, &amp;quot;Season &amp;quot;, &amp;quot;s0&amp;quot;)) %&amp;gt;% 
  mutate(episode = ifelse(nchar(no_inseason) == 1, paste0(&amp;quot;e0&amp;quot;, no_inseason), paste0(&amp;quot;e&amp;quot;, no_inseason))) %&amp;gt;% 
  mutate(rottenlink = str_glue(&amp;quot;https://www.rottentomatoes.com/tv/game_of_thrones/{season}/{episode}&amp;quot;)) %&amp;gt;% 
  pull(rottenlink) %&amp;gt;% 
  map_dfr(get_rotten_ratings) %&amp;gt;% 
  bind_cols(episode_list, .) 

# ## save data after scraping
save(episode_ratings, file = &amp;quot;data/episode_ratings.Rdata&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;ratings-by-writer&#34;&gt;Ratings by Writer&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;episode_ratings %&amp;gt;% 
  mutate(written_by = fct_reorder(written_by, rotten_rating)) %&amp;gt;% 
  ggplot(aes(written_by, rotten_rating)) +
  geom_jitter(width = 0.3) +
  geom_violin(alpha = 0.75, aes(fill = written_by)) +
  geom_boxplot(width = 0.05) +
  guides(fill = F) +
  ggthemes::theme_hc() +
  scale_fill_got(&amp;quot;&amp;quot;, discrete = T, option = &amp;quot;Margaery&amp;quot;) +
  labs(y = &amp;quot;Rotten Tomatoes Rating&amp;quot;, x = &amp;quot;&amp;quot;, title = &amp;quot;Game of Thrones&amp;quot;, subtitle = &amp;quot;Ratings  by Writer&amp;quot;)  +
  theme(plot.title = element_text(size = 20, face = &amp;quot;bold&amp;quot;, hjust = 0.5, family = &amp;quot;Game of Thrones&amp;quot;),
        plot.subtitle = element_text(size = 10, hjust = 0.5, family = &amp;quot;Game of Thrones&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/favstats/got_ratings/blob/master/rating_scraper_files/figure-gfm/analysis-1.png?raw=true&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://github.com/favstats/got_ratings/blob/master/rating_scraper_files/figure-gfm/analysis-1.png?raw=true&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ggsave_it(writer_ratings, width = 9, height = 5)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;scores-by-writer&#34;&gt;Scores by Writer&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;episode_ratings %&amp;gt;% 
  mutate(written_by = fct_reorder(written_by, rotten_score)) %&amp;gt;% 
  ggplot(aes(written_by, rotten_score)) +
  geom_jitter(width = 0.3) +
  geom_violin(alpha = 0.75, aes(fill = written_by)) +
  geom_boxplot(width = 0.05) +
  guides(fill = F) +
  ggthemes::theme_hc() +
  scale_fill_got(&amp;quot;&amp;quot;, discrete = T, option = &amp;quot;Margaery&amp;quot;) +
  labs(y = &amp;quot;Rotten Tomatoes Scores&amp;quot;, x = &amp;quot;&amp;quot;, title = &amp;quot;Game of Thrones&amp;quot;, subtitle = &amp;quot;Episode  Scores  by Writer&amp;quot;)  +
  theme(plot.title = element_text(size = 20, face = &amp;quot;bold&amp;quot;, hjust = 0.5, family = &amp;quot;Game of Thrones&amp;quot;),
        plot.subtitle = element_text(size = 10, hjust = 0.5, family = &amp;quot;Game of Thrones&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/favstats/got_ratings/blob/master/rating_scraper_files/figure-gfm/unnamed-chunk-9-1.png?raw=true&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://github.com/favstats/got_ratings/blob/master/rating_scraper_files/figure-gfm/unnamed-chunk-9-1.png?raw=true&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ggsave_it(writer_scores, width = 9, height = 5)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;rating-by-director&#34;&gt;Rating by Director&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;episode_ratings %&amp;gt;% 
  mutate(directed_by = fct_reorder(directed_by, rotten_rating)) %&amp;gt;% 
  ggplot(aes(directed_by, rotten_rating)) +
  geom_jitter(width = 0.3) +
  geom_violin(alpha = 0.75, aes(fill = directed_by)) +
  geom_boxplot(width = 0.05) +
  guides(fill = F) +
  ggthemes::theme_hc() +
  scale_fill_got(&amp;quot;&amp;quot;, discrete = T, option = &amp;quot;Stark2&amp;quot;) +
  labs(y = &amp;quot;Rotten Tomatoes Rating&amp;quot;, x = &amp;quot;&amp;quot;, title = &amp;quot;Game of Thrones&amp;quot;, subtitle = &amp;quot;Ratings  by Director&amp;quot;)  +
  theme(plot.title = element_text(size = 20, face = &amp;quot;bold&amp;quot;, hjust = 0.5, family = &amp;quot;Game of Thrones&amp;quot;),
        plot.subtitle = element_text(size = 10, hjust = 0.5, family = &amp;quot;Game of Thrones&amp;quot;)) +
  coord_flip()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/favstats/got_ratings/blob/master/rating_scraper_files/figure-gfm/unnamed-chunk-10-1.png?raw=true&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://github.com/favstats/got_ratings/blob/master/rating_scraper_files/figure-gfm/unnamed-chunk-10-1.png?raw=true&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ggsave_it(director_ratings, width = 6, height = 12)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;scores-by-director&#34;&gt;Scores by Director&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;episode_ratings %&amp;gt;% 
  mutate(directed_by = fct_reorder(directed_by, rotten_score)) %&amp;gt;% 
  ggplot(aes(directed_by, rotten_score)) +
  geom_jitter(width = 0.3) +
  geom_violin(alpha = 0.75, aes(fill = directed_by)) +
  geom_boxplot(width = 0.05) +
  guides(fill = F) +
  ggthemes::theme_hc() +
  scale_fill_got(&amp;quot;&amp;quot;, discrete = T, option = &amp;quot;Stark2&amp;quot;) +
  labs(y = &amp;quot;Rotten Tomatoes Rating&amp;quot;, x = &amp;quot;&amp;quot;, title = &amp;quot;Game of Thrones&amp;quot;, subtitle = &amp;quot;Scores  by Director&amp;quot;)  +
  theme(plot.title = element_text(size = 20, face = &amp;quot;bold&amp;quot;, hjust = 0.5, family = &amp;quot;Game of Thrones&amp;quot;),
        plot.subtitle = element_text(size = 10, hjust = 0.5, family = &amp;quot;Game of Thrones&amp;quot;)) +
  coord_flip()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/favstats/got_ratings/blob/master/rating_scraper_files/figure-gfm/unnamed-chunk-11-1.png?raw=true&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://github.com/favstats/got_ratings/blob/master/rating_scraper_files/figure-gfm/unnamed-chunk-11-1.png?raw=true&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ggsave_it(director_scores, width = 6, height = 12)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;rating-by-episode&#34;&gt;Rating by Episode&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;episode_titles &amp;lt;- episode_ratings %&amp;gt;%
  filter(rotten_rating &amp;gt; 9.4 | rotten_rating &amp;lt; 7.5) %&amp;gt;% 
  filter(title != &amp;quot;The Lion and the Rose&amp;quot;) %&amp;gt;% 
  filter(title != &amp;quot;The Bells&amp;quot;)

episode_ratings %&amp;gt;% 
  ggplot(aes(no_overall, rotten_rating, color = season)) +
  geom_point() +
  geom_line(alpha = 0.75) +
  ggrepel::geom_text_repel(data = episode_titles, aes(label = title), 
                           size = 2.5, nudge_y = 0.15, nudge_x = 3, seed = 200, color = &amp;quot;black&amp;quot;) + 
  facet_wrap(~season, scales = &amp;quot;free_x&amp;quot;, nrow = 1)  +
  ggthemes::theme_hc() +
  scale_color_got(&amp;quot;&amp;quot;, discrete = T, option = &amp;quot;Targaryen2&amp;quot;) +
  labs(y = &amp;quot;Rotten Tomatoes Rating&amp;quot;, x = &amp;quot;&amp;quot;, title = &amp;quot;Game of Thrones&amp;quot;, subtitle = &amp;quot;Ratings  by Episode&amp;quot;)  +
  theme(plot.title = element_text(size = 20, face = &amp;quot;bold&amp;quot;, hjust = 0.5, family = &amp;quot;Game of Thrones&amp;quot;),
        plot.subtitle = element_text(size = 10, hjust = 0.5, family = &amp;quot;Game of Thrones&amp;quot;)) +
  guides(color = F)  +
  theme(axis.text.x = element_blank(),
        axis.ticks.x = element_blank())
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/favstats/got_ratings/blob/master/rating_scraper_files/figure-gfm/unnamed-chunk-12-1.png?raw=true&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://github.com/favstats/got_ratings/blob/master/rating_scraper_files/figure-gfm/unnamed-chunk-12-1.png?raw=true&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ggsave_it(episode_ratings, width = 12, height = 6)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;score-by-episode&#34;&gt;Score by Episode&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;episode_titles &amp;lt;- episode_ratings %&amp;gt;%
  filter(rotten_score &amp;lt; 80) %&amp;gt;%
  filter(title != &amp;quot;The Lion and the Rose&amp;quot;) %&amp;gt;%
  filter(title != &amp;quot;The Bells&amp;quot;)

episode_ratings %&amp;gt;% 
  ggplot(aes(no_overall, rotten_score, color = season)) +
  geom_point() +
  geom_line(alpha = 0.75) +
  ggrepel::geom_text_repel(data = episode_titles, aes(label = title),
                           size = 2.5, nudge_y = 2, nudge_x = 5, seed = 200, color = &amp;quot;black&amp;quot;) +
  facet_wrap(~season, scales = &amp;quot;free_x&amp;quot;, nrow = 1)  +
  ggthemes::theme_hc() +
  scale_color_got(&amp;quot;&amp;quot;, discrete = T, option = &amp;quot;Greyjoy&amp;quot;) +
  labs(y = &amp;quot;Rotten Tomatoes Score&amp;quot;, x = &amp;quot;&amp;quot;, title = &amp;quot;Game of Thrones&amp;quot;, subtitle = &amp;quot;Scores  by Episode&amp;quot;)  +
  theme(plot.title = element_text(size = 20, face = &amp;quot;bold&amp;quot;, hjust = 0.5, family = &amp;quot;Game of Thrones&amp;quot;),
        plot.subtitle = element_text(size = 10, hjust = 0.5, family = &amp;quot;Game of Thrones&amp;quot;)) +
  guides(color = F)  +
  theme(axis.text.x = element_blank(),
        axis.ticks.x = element_blank())
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/favstats/got_ratings/blob/master/rating_scraper_files/figure-gfm/unnamed-chunk-13-1.png?raw=true&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://github.com/favstats/got_ratings/blob/master/rating_scraper_files/figure-gfm/unnamed-chunk-13-1.png?raw=true&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ggsave_it(rotten_score, width = 12, height = 6)
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>do_if</title>
      <link>/post/do_if/</link>
      <pubDate>Tue, 14 May 2019 00:00:00 +0200</pubDate>
      
      <guid>/post/do_if/</guid>
      <description>&lt;p&gt;So recently I was writing functions with many if statements and pipes. Given that
I am a huge fan of the &lt;code&gt;%&amp;gt;%&lt;/code&gt; pipe workflow, I was thinking about
creating a pipable if environment. Here is my attempt to implement
exactly that. With a lot help from my good friend &lt;a href=&#34;https://twitter.com/Ben_Guinaudeau&#34; target=&#34;_blank&#34;&gt;Ben&lt;/a&gt;. If you are reading this, thank you! You made this possible.&lt;/p&gt;

&lt;p&gt;Import gist from here:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(dplyr)
source(&amp;quot;https://gist.githubusercontent.com/favstats/3e1d8b65a019b24344b7b3dea6002a0b/raw/6919b22f01db6d672d64ebcac5798b8495c89ad2/do_if.R&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So let’s say you want to create a function that has multiple if
specifications but you also want to always create two columns regardless
of the input. You might create something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;mock_function &amp;lt;- function(.data, argument = &amp;quot;&amp;quot;) {
  
  if (argument == &amp;quot;do_this1&amp;quot;) {
    .data &amp;lt;-.data %&amp;gt;%
          dplyr::filter(am == 1) %&amp;gt;%
          dplyr::filter(cyl == 6) %&amp;gt;%
          dplyr::mutate(x = disp &amp;gt;= 100)
  } else if (argument == &amp;quot;do_this2&amp;quot;) {
    .data &amp;lt;-.data %&amp;gt;%
          dplyr::filter(am == 0) %&amp;gt;%
          dplyr::filter(cyl == 4) %&amp;gt;%
          dplyr::mutate(x = disp &amp;lt; 100)
  }
  
  final &amp;lt;- .data %&amp;gt;% 
    mutate(new_column = &amp;quot;Say What&amp;quot;) %&amp;gt;% 
    mutate(other_column = &amp;quot;Say That&amp;quot;)
  
  return(final)
  
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So if you leave the argument blank you will receive the entire dataset
with two new columns:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;mtcars %&amp;gt;% 
  mock_function() %&amp;gt;% 
  select(vs:other_column) %&amp;gt;% 
  as_tibble()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## # A tibble: 32 x 6
##       vs    am  gear  carb new_column other_column
##    &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;      &amp;lt;chr&amp;gt;       
##  1     0     1     4     4 Say What   Say That    
##  2     0     1     4     4 Say What   Say That    
##  3     1     1     4     1 Say What   Say That    
##  4     1     0     3     1 Say What   Say That    
##  5     0     0     3     2 Say What   Say That    
##  6     1     0     3     1 Say What   Say That    
##  7     0     0     3     4 Say What   Say That    
##  8     1     0     4     2 Say What   Say That    
##  9     1     0     4     2 Say What   Say That    
## 10     1     0     4     4 Say What   Say That    
## # ... with 22 more rows
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you add &lt;code&gt;&amp;quot;do_this1&lt;/code&gt; to the argument you will receive a filtered
dataset:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;mtcars %&amp;gt;% 
  mock_function(&amp;quot;do_this1&amp;quot;) %&amp;gt;% 
  select(vs:other_column) %&amp;gt;% 
  as_tibble()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## # A tibble: 3 x 7
##      vs    am  gear  carb x     new_column other_column
##   &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;lgl&amp;gt; &amp;lt;chr&amp;gt;      &amp;lt;chr&amp;gt;       
## 1     0     1     4     4 TRUE  Say What   Say That    
## 2     0     1     4     4 TRUE  Say What   Say That    
## 3     0     1     5     6 TRUE  Say What   Say That
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And if you specify &lt;code&gt;&amp;quot;do_this2&lt;/code&gt; it will create a different subset.. but
always with the &lt;code&gt;new_column&lt;/code&gt; and &lt;code&gt;other_column&lt;/code&gt; intact.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;mtcars %&amp;gt;% 
  mock_function(&amp;quot;do_this2&amp;quot;) %&amp;gt;% 
  select(vs:other_column) %&amp;gt;% 
  as_tibble()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## # A tibble: 3 x 7
##      vs    am  gear  carb x     new_column other_column
##   &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;lgl&amp;gt; &amp;lt;chr&amp;gt;      &amp;lt;chr&amp;gt;       
## 1     1     0     4     2 FALSE Say What   Say That    
## 2     1     0     4     2 FALSE Say What   Say That    
## 3     1     0     3     1 FALSE Say What   Say That
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now this would work just fine. But what if you have multiple if
statements along your pipe chain and you don’t want to split into so
many different if statements? Well this is where &lt;code&gt;do_if&lt;/code&gt; comes in!&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;#&#39; A pipable if statement
#&#39;
#&#39; This function allows to create an if statement that can be used within a pipable workflow
#&#39;
#&#39; @importFrom magrittr %&amp;gt;%
#&#39; @importFrom rlang parse_expr
#&#39; @param .data tibble
#&#39; @param condition logical test
#&#39; @param call a formula descibing a pipe to be evaluated if condition is \code{code}
#&#39; @examples
#&#39; any_condition &amp;lt;- T
#&#39;
#&#39; mtcars %&amp;gt;%
#&#39; do_if(any_condition, ~{
#&#39; .x %&amp;gt;%
#&#39;  dplyr::filter(cyl == 6) %&amp;gt;%
#&#39;  dplyr::mutate(x = disp &amp;gt; 170)
#&#39; })
#&#39; @export
do_if &amp;lt;- function(.data, condition, call){

  if(condition){
    .x &amp;lt;- .data

    call_str &amp;lt;- call %&amp;gt;%
      as.character %&amp;gt;%
      .[2]

    out &amp;lt;- eval(rlang::parse_expr(call_str))

    return(out)
  } else {
    return(.data)
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With &lt;code&gt;do_if&lt;/code&gt; you can specify an if statement &lt;em&gt;within&lt;/em&gt; a pipable
workflow!&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;any_condition &amp;lt;- T

mtcars %&amp;gt;%
  do_if(any_condition, ~{
    .x %&amp;gt;%
      dplyr::filter(cyl == 6) %&amp;gt;%
      dplyr::mutate(x = disp &amp;gt; 170)
    }) %&amp;gt;% 
  as_tibble()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## # A tibble: 7 x 12
##     mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb x    
##   &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;lgl&amp;gt;
## 1  21       6  160    110  3.9   2.62  16.5     0     1     4     4 FALSE
## 2  21       6  160    110  3.9   2.88  17.0     0     1     4     4 FALSE
## 3  21.4     6  258    110  3.08  3.22  19.4     1     0     3     1 TRUE 
## 4  18.1     6  225    105  2.76  3.46  20.2     1     0     3     1 TRUE 
## 5  19.2     6  168.   123  3.92  3.44  18.3     1     0     4     4 FALSE
## 6  17.8     6  168.   123  3.92  3.44  18.9     1     0     4     4 FALSE
## 7  19.7     6  145    175  3.62  2.77  15.5     0     1     5     6 FALSE
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This can come in really handy if you are not a big fan of seperating
your pipe workflow all too often. Let’s recreate the mock_function with
the help of &lt;code&gt;do_if&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;mock_function &amp;lt;- function(.data, argument = &amp;quot;&amp;quot;) {
  .data %&amp;gt;% 
    do_if(
      argument == &amp;quot;do_this1&amp;quot;,
      ~{.x %&amp;gt;%
          dplyr::filter(am == 1) %&amp;gt;%
          dplyr::filter(cyl == 6) %&amp;gt;%
          dplyr::mutate(x = disp &amp;gt;= 100)
        }
    ) %&amp;gt;% 
    do_if(
      argument == &amp;quot;do_this2&amp;quot;,
      ~{.x %&amp;gt;%
          dplyr::filter(am == 0) %&amp;gt;%
          dplyr::filter(cyl == 4) %&amp;gt;%
          dplyr::mutate(x = disp &amp;lt; 100)
        }
    ) %&amp;gt;% 
    mutate(other_column = &amp;quot;Say That&amp;quot;) %&amp;gt;% 
    mutate(new_column = &amp;quot;Say What&amp;quot;) 
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And again we can get the same results, only with a slighly less
troublesome workflow within a function!&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;mtcars %&amp;gt;% 
  mock_function() %&amp;gt;% 
  as_tibble()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## # A tibble: 32 x 13
##      mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb
##    &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;
##  1  21       6  160    110  3.9   2.62  16.5     0     1     4     4
##  2  21       6  160    110  3.9   2.88  17.0     0     1     4     4
##  3  22.8     4  108     93  3.85  2.32  18.6     1     1     4     1
##  4  21.4     6  258    110  3.08  3.22  19.4     1     0     3     1
##  5  18.7     8  360    175  3.15  3.44  17.0     0     0     3     2
##  6  18.1     6  225    105  2.76  3.46  20.2     1     0     3     1
##  7  14.3     8  360    245  3.21  3.57  15.8     0     0     3     4
##  8  24.4     4  147.    62  3.69  3.19  20       1     0     4     2
##  9  22.8     4  141.    95  3.92  3.15  22.9     1     0     4     2
## 10  19.2     6  168.   123  3.92  3.44  18.3     1     0     4     4
## # ... with 22 more rows, and 2 more variables: other_column &amp;lt;chr&amp;gt;,
## #   new_column &amp;lt;chr&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;mtcars %&amp;gt;% 
  mock_function(argument = &amp;quot;do_this1&amp;quot;) %&amp;gt;% 
  as_tibble()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## # A tibble: 3 x 14
##     mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb x    
##   &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;lgl&amp;gt;
## 1  21       6   160   110  3.9   2.62  16.5     0     1     4     4 TRUE 
## 2  21       6   160   110  3.9   2.88  17.0     0     1     4     4 TRUE 
## 3  19.7     6   145   175  3.62  2.77  15.5     0     1     5     6 TRUE 
## # ... with 2 more variables: other_column &amp;lt;chr&amp;gt;, new_column &amp;lt;chr&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;mtcars %&amp;gt;% 
  mock_function(argument = &amp;quot;do_this2&amp;quot;) %&amp;gt;% 
  as_tibble()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## # A tibble: 3 x 14
##     mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb x    
##   &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;lgl&amp;gt;
## 1  24.4     4  147.    62  3.69  3.19  20       1     0     4     2 FALSE
## 2  22.8     4  141.    95  3.92  3.15  22.9     1     0     4     2 FALSE
## 3  21.5     4  120.    97  3.7   2.46  20.0     1     0     3     1 FALSE
## # ... with 2 more variables: other_column &amp;lt;chr&amp;gt;, new_column &amp;lt;chr&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;UPDATE:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://twitter.com/kearneymw&#34; target=&#34;_blank&#34;&gt;Mike Kearney&lt;/a&gt; created a much smoother version with the ability to create an else statement as well.&lt;/p&gt;

&lt;p&gt;Check it out &lt;a href=&#34;https://gist.github.com/mkearney/bb2ce47eb635c14d5f99151636e26b21&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;
#&#39; Conditionally apply expressions on a data object
#&#39; 
#&#39; @param .data Input data
#&#39; @param condition A logical value to determine whether to use .if or .else
#&#39; @param .if Formula or function to apply to intput data when condition is TRUE
#&#39; @param .else Formula or function to apply to intput data when condition is FALSE
#&#39; @return Output of appropriate .if/.else call
#&#39; @export
#&#39; @importFrom rlang as_closure
do_if_else &amp;lt;- function(.data, condition, .if, .else = identity) {
  if (condition) {
    call &amp;lt;- rlang::as_closure(.if)
  } else {
    call &amp;lt;- rlang::as_closure(.else)
  }
  do.call(call, list(.data))
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Usage Example:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://pbs.twimg.com/media/D6i5BJ2X4AAcnVx.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Exploring U.S. Refugee Data</title>
      <link>/post/exploring_us_refugee_data/</link>
      <pubDate>Sat, 27 Apr 2019 00:00:00 +0200</pubDate>
      
      <guid>/post/exploring_us_refugee_data/</guid>
      <description>

&lt;h3 id=&#34;a-short-history-of-refugees-in-the-u-s&#34;&gt;A Short History of Refugees in the U.S.&lt;/h3&gt;

&lt;p&gt;The United States has a long history of accepting refugees fleeing war,
violence or persecution. From the aftermath of World War II to wars in
Asia and the collapse of the Soviet bloc, there has not been a shortage
of people seeking to escape dire conditions and applying for refugee
status in the United States. According to State Department data, more
than 3.3 million refugees have been resettled in the United States since
1975.&lt;/p&gt;

&lt;p&gt;After the Vietnam War and the record high number of refugees from
Southeast Asia, Congress passed the Refugee Act of 1980 (signed into law
by President Jimmy Carter), which established the Office of Refugee
Resettlement, standardized the refugee admission process and serves as
the legal basis for the U.S. Refugee Admissions Program (USRAP) to this
day. The year the law passed, refugee admissions peaked at an all-time
historic high with more than 200,000 individuals being admitted to the
U.S., largely from Southeast Asia.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://github.com/favstats/usa_refugee_data/raw/master/images/refugee75.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;With the fall of the Soviet Union and the collapse of the Eastern bloc,
refugee numbers peaked again in the early to mid-1990s with a total of
776.000 arrivals between the period of 1990 and 1996. Out of those, 40%
came from the Soviet Union or countries previously under its control.
Between 1997 and 2000, another 300.000 refugees arrived, mostly from
Europe (37%) due to the wars in former Yugoslavia. Since then, refugee
admissions from Europe have decreased significantly – only 8% of all
refugees resettled in the U.S. between 2001 and 2018 came from Europe.&lt;/p&gt;

&lt;p&gt;After the 911 attacks, refugee numbers experienced a significant drop
as President George W. Bush halted admission processes for several
months. In 2002 and 2003, the U.S. took in fewer than 29.000 refugees
each year, down from 70.000 admissions in 2001.&lt;/p&gt;

&lt;p&gt;Starting in 2004, refugee admissions started to increase again. Almost
half, 50.000 out of 107.000 refugees in 2004 and 2005, came from Africa
alone. In the following years, African refugees are increasingly
becoming a greater share of all admitted refugees.&lt;/p&gt;

&lt;p&gt;During the Obama administration, admissions mostly stayed between 55,000
and 85,000 refugees per year. In 2016, President Obama raised the number
of refugees by 5,000 (from a previous ceiling of 80,000) to account for
the refugee crisis caused by the escalating conflict in Syria. In order
to adequately respond to the crisis, the ceiling for accepted refugees
was supposed to be raised from 85,000 to 110,000 refugees in the fiscal
year 2017.&lt;/p&gt;

&lt;p&gt;However, the Trump administration discarded the suggested ceiling and
even set the cap to 50,000 refugees for fiscal 2017. Trump lowered the
cap again for fiscal 2018 to 45,000 admissions, although the actual
number of refugees that were resettled in 2018 was less than 20.000: the
lowest number since 1977. Coming up in 2019, the cap is going to be set
at 30,000 which is the lowest number since the existence of the program.&lt;/p&gt;

&lt;h3 id=&#34;who-are-the-refugees&#34;&gt;Who are the Refugees&lt;/h3&gt;

&lt;p&gt;The state department provides us with some demographic information about
the refugees from 2002 onwards. Except for three years (2005, 2006 and
2016), most of the admitted refugees in each year were Christian. Here
too, we can see a sharp decline once the Trump administration lowered
the cap in 2017 and 2018.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://github.com/favstats/usa_refugee_data/raw/master/images/gg_relig.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;While the ratio of accepted Muslim (46%) and Christian refugees (44%) in
2016 was almost equal, Muslim refugee admissions dropped to 35% in 2017
and 16% in 2018, despite the fact that a significant chunk of global
refugees are from countries where Islam is the predominant religion. The
majority of Muslim refugees in 2018 came from Myanmar (1117 individuals
or 31% of all Muslim refugees that year), fleeing an ethnic cleansing
campaign that killed thousands. The next largest groups of Muslims in
2018 are from Afghanistan (806 refugees or 22%) and the Democratic
Republic Congo (422 or
12%).&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://github.com/favstats/usa_refugee_data/raw/master/impakter_files/figure-gfm/unnamed-chunk-2-1.png&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;But the Trump administration did not only cut back on Muslim refugees.
Despite vows to protect persecuted Christians all around the world and
greater acceptance rates than their Muslim counterparts, the lowered cap
slashed the number of accepted Christian refugees by more than half
since 2016: from 43,000 Christians in 2016 to 17,000 in 2017 and 2018,
respectively.&lt;/p&gt;

&lt;p&gt;When it comes to gender, the balance is quite equal with slightly more
men than women admitted as refugees (52% male). The largest group of
refugees admitted between 2002 and 2018 is below 14 (30%) and roughly
half of all refugees are 20 years old or
younger.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://github.com/favstats/usa_refugee_data/raw/master/impakter_files/figure-gfm/unnamed-chunk-3-1.png&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The U.S. department of state also provides us with data concerning
education levels of admitted refugees. The largest group has completed
secondary education at the very least (29%), followed by primary
education (26%). 9% of all resettled refugees have a University-level
degree.&lt;/p&gt;

&lt;h3 id=&#34;where-do-refugees-come-from&#34;&gt;Where do Refugees come from?&lt;/h3&gt;

&lt;p&gt;Given the current Government shutdown over a border wall, one might
expect that there are many refugees from South America. A look at the
data reveals that the U.S. barely takes any refugees from South America.
Why is that the case?&lt;/p&gt;

&lt;p&gt;The United States differentiates between refugees and asylum seekers. A
refugee is defined as as any person that “has a well-founded fear of
persecution on account of race, religion, nationality, membership in a
particular social group, or political opinion.”&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://github.com/favstats/usa_refugee_data/raw/master/images/refugee_total_map.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Refugees are typically admitted through the UNHCR’s Resettlement Program
after their refugee status has been assessed and they have been vetted
by the State Department, a process that takes at least 18 months. While
many immigrants, legal and undocumented, come from Central and South
America, U.S. regulations make it difficult for them to qualify as
refugees as they have to present themselves at a port of entry or be
within the territory of the U.S. to become asylum seekers (which refers
to a different process).&lt;/p&gt;

&lt;h3 id=&#34;where-do-refugees-go&#34;&gt;Where do Refugees go?&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://github.com/favstats/usa_refugee_data/raw/master/images/state_total.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Finally, one can ask where the admitted refugees will go. Most refugees
from 2002 to 2018 were admitted in California. 11% of all refugees or
107,000 individuals were admitted there. California is followed by Texas
with 9% of all refugees. With over 25,000 individuals, Houston is also
the city with most refugees in the United States (Dallas is on the third
place with 18,000 individuals). The lowest number of accepted refugees
were taken in by the state of Hawaii with 127 refugees, Mississippi with
121 refugees and Wyoming with 6 individuals resettled between 2002 and
2018.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://github.com/favstats/usa_refugee_data/raw/master/images/city_stats.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Is American democracy under threat?</title>
      <link>/post/blw_data/</link>
      <pubDate>Sat, 16 Feb 2019 00:00:00 +0100</pubDate>
      
      <guid>/post/blw_data/</guid>
      <description>

&lt;p&gt;Is American democracy under threat? &lt;a href=&#34;http://brightlinewatch.org&#34; target=&#34;_blank&#34;&gt;Bright Line Watch&lt;/a&gt; regularly asks political scientists and the public questions about democratic performance.&lt;/p&gt;

&lt;p&gt;In their visualizations and reports, Bright Line Watch mostly focuses on measures of democratic performance to the degree that the &lt;a href=&#34;http://brightlinewatch.org/wave7/&#34; target=&#34;_blank&#34;&gt;US fulfills these standards&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In this little exercise, I want to focus on the measures that the US does &lt;em&gt;NOT&lt;/em&gt; perform well on. Here I visualize the results.&lt;/p&gt;

&lt;h2 id=&#34;load-neccesary-packages&#34;&gt;Load neccesary Packages&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Install these packages if you don&#39;t have them yet
# if (!require(&amp;quot;pacman&amp;quot;)) install.packages(&amp;quot;pacman&amp;quot;)
# devtools::install_github(&amp;quot;favstats/tidytemplate&amp;quot;)

pacman::p_load(tidyverse, haven, tidytemplate)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;download-data&#34;&gt;Download Data&lt;/h2&gt;

&lt;p&gt;Data downloaded from &lt;a href=&#34;http://brightlinewatch.org/surveys/&#34; target=&#34;_blank&#34;&gt;Bright Line Watch
homepage&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;## Download Data
# download.file(&amp;quot;http://brightlinewatch.org/wp-content/uploads/2018/11/BLW-Wave-7.zip&amp;quot;, destfile = &amp;quot;data/blw_data7&amp;quot;)

as.character(unzip(&amp;quot;data/blw_data7&amp;quot;, list = TRUE)$Name)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;##  [1] &amp;quot;BLW_Expert_Waves1234567.csv&amp;quot;         
##  [2] &amp;quot;BLW_Expert_Waves1234567.dta&amp;quot;         
##  [3] &amp;quot;BLW_Expert_Waves1234567_nolabels.csv&amp;quot;
##  [4] &amp;quot;BLW_Public_Waves34567.dta&amp;quot;           
##  [5] &amp;quot;BLW_wave34567_public.csv&amp;quot;            
##  [6] &amp;quot;BLW_wave3456_public_nolabels.csv&amp;quot;    
##  [7] &amp;quot;BLW_wave7_expert.csv&amp;quot;                
##  [8] &amp;quot;BLW_wave7_expert.dta&amp;quot;                
##  [9] &amp;quot;BLW_wave7_expert_nolabels.csv&amp;quot;       
## [10] &amp;quot;BLW_wave7_public.csv&amp;quot;                
## [11] &amp;quot;BLW_wave7_public.dta&amp;quot;                
## [12] &amp;quot;BLW_wave7_public_nolabels.csv&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;blw_expert &amp;lt;- read_dta(unzip(&amp;quot;data/blw_data7&amp;quot;, files = &amp;quot;BLW_Expert_Waves1234567.dta&amp;quot;))

# blw_expert %&amp;gt;% filter(wave == 6)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;expert-survey&#34;&gt;Expert Survey&lt;/h2&gt;

&lt;p&gt;Before I can visualize the survey, I clean and prepare the data:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;n_experts &amp;lt;- blw_expert %&amp;gt;% 
 filter(finished == 1) %&amp;gt;% nrow
 

blw_expert_viz &amp;lt;- blw_expert %&amp;gt;% 
  select(wave, perf_misconduct:perf_investigations) %&amp;gt;% 
  gather(key, value, -wave) %&amp;gt;% 
  drop_na(value) %&amp;gt;% 
  mutate(standard = ifelse(value == 1, &amp;quot;Missing Standard&amp;quot;, &amp;quot;Anything Else&amp;quot;)) %&amp;gt;% 
  count(key, wave, standard) %&amp;gt;% 
  group_by(wave, key) %&amp;gt;% 
  mutate(total = sum(n)) %&amp;gt;% 
  mutate(perc = n / total) %&amp;gt;% 
  ungroup() %&amp;gt;% 
  filter(standard == &amp;quot;Missing Standard&amp;quot;)  %&amp;gt;% 
  mutate(statements = case_when(
    key == &amp;quot;perf_ban_ideology&amp;quot; ~ &amp;quot;All parties allowed&amp;quot;,
    key == &amp;quot;perf_candidates_disclose&amp;quot; ~ &amp;quot;Candidates disclose info&amp;quot;,
    key == &amp;quot;perf_common_und&amp;quot; ~ &amp;quot;Common understanding of facts&amp;quot;,
    key == &amp;quot;perf_compromise&amp;quot; ~ &amp;quot;Compromise sought&amp;quot;,
    key == &amp;quot;perf_contributions&amp;quot; ~ &amp;quot;Contribs determine policy&amp;quot;,
    key == &amp;quot;perf_districts&amp;quot; ~ &amp;quot;Districts not biased&amp;quot;,
    key == &amp;quot;perf_election_fraud&amp;quot; ~ &amp;quot;Fraud-free elections&amp;quot;,
    key == &amp;quot;perf_equal_rights&amp;quot; ~ &amp;quot;Equal political/legal rights&amp;quot;,
    key == &amp;quot;perf_expand_executive&amp;quot; ~ &amp;quot;Constitution limits executive&amp;quot;,
    key == &amp;quot;perf_foreign_influence&amp;quot; ~ &amp;quot;No foreign influence&amp;quot;,
    key == &amp;quot;perf_funds_transparent&amp;quot; ~ &amp;quot;Campaign funds transparent&amp;quot;,
    key == &amp;quot;perf_investigations&amp;quot; ~ &amp;quot;Investigations not compromised&amp;quot;,
    key == &amp;quot;perf_journalists&amp;quot; ~ &amp;quot;No interference with press&amp;quot;,
    key == &amp;quot;perf_judicial_ind&amp;quot; ~ &amp;quot;Judicial independence&amp;quot;,
    key == &amp;quot;perf_judiciary_check&amp;quot; ~ &amp;quot;Judiciary can limit executive&amp;quot;,
    key == &amp;quot;perf_legislature_check&amp;quot; ~ &amp;quot;Legislature can limit executive&amp;quot;,
    key == &amp;quot;perf_misconduct&amp;quot; ~ &amp;quot;Sanctions for misconduct&amp;quot;,
    key == &amp;quot;perf_monitor_opponents&amp;quot; ~ &amp;quot;Agencies not used against opp.&amp;quot;,
    key == &amp;quot;perf_opinions&amp;quot; ~ &amp;quot;Opinions heard on policy&amp;quot;,
    key == &amp;quot;perf_participation&amp;quot; ~ &amp;quot;Voter participation&amp;quot;,
    key == &amp;quot;perf_patriotism&amp;quot; ~ &amp;quot;Patriotism not questioned&amp;quot;,
    key == &amp;quot;perf_private_gain&amp;quot; ~ &amp;quot;No private gains from office&amp;quot;,
    key == &amp;quot;perf_private_violence&amp;quot; ~ &amp;quot;No political violence&amp;quot;,
    key == &amp;quot;perf_protest&amp;quot; ~ &amp;quot;Protest rights&amp;quot;,
    key == &amp;quot;perf_votes_impact&amp;quot; ~ &amp;quot;Votes have equal impact&amp;quot;,
    key == &amp;quot;perf_voting_rights&amp;quot; ~ &amp;quot;Equal voting rights&amp;quot;,
    key == &amp;quot;perf_free_speech&amp;quot; ~ &amp;quot;Free speech&amp;quot;,
    T ~ NA_character_
  )) %&amp;gt;% 
  mutate(statements = forcats::fct_reorder(statements, perc)) 
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## Warning: attributes are not identical across measure variables;
## they will be dropped
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The data ranges from February 2017 to October 2018. For the purpose of this visualization, I took out 27 statements of democratic performance and show the percentage of experts that do not think the U.S. meets the necessary standard (a full list of statements can be found in the appendix).&lt;/p&gt;

&lt;p&gt;Visualizing expert survey results now:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;survey_dates &amp;lt;- c(&amp;quot;Feb/17&amp;quot;, &amp;quot;May/17&amp;quot;, &amp;quot;Sep/17&amp;quot;, &amp;quot;Jan/18&amp;quot;, &amp;quot;Apr/18&amp;quot;, &amp;quot;Jul/18&amp;quot;, &amp;quot;Oct/18&amp;quot;)


blw_expert_viz %&amp;gt;% 
  # mutate(mean_perc =  ifelse(perc &amp;gt;= mean(perc), &amp;quot;Above&amp;quot;, &amp;quot;Below&amp;quot;)) %&amp;gt;% 
  ggplot(aes(wave, statements, fill = perc)) +
  geom_tile(alpha = 0.7) +
  ggpubr::theme_pubclean() +
  viridis::scale_fill_viridis(direction = -1, begin = 0.25, option = &amp;quot;B&amp;quot;) +
  geom_text(aes(label = round(perc * 100))) +
  scale_x_continuous(breaks = 1:7, labels = survey_dates) +
  labs(y = &amp;quot;&amp;quot;, x = &amp;quot;&amp;quot;, title = &amp;quot;Ratings of U.S. democratic (non-)performance - Expert perceptions&amp;quot;,
       subtitle = &amp;quot;Percentage who answered &#39;U.S. does not meet this standard&#39;&amp;quot;,
       caption = glue::glue(&amp;quot;Data: Bright Line Watch expert survey results Wave 1 - 7\nRespondents: {n_experts} Political Scientists at American colleges and universities&amp;quot;)) +
  guides(fill = F) +
  theme(strip.background = element_rect(fill = &amp;quot;gray93&amp;quot;, color = F), 
        legend.position = c(0.935, 0.075), 
    plot.title = element_text(size = 14, face = &amp;quot;bold&amp;quot;),
    plot.subtitle = element_text(size = 10, face = &amp;quot;italic&amp;quot;),
    strip.text = element_text(size = 10),
    plot.caption = element_text(size = 10, hjust = 0.9),
    legend.title = element_text(size = 12), 
    legend.text = element_text(size = 10),
    legend.key.height = unit(1, unit = &amp;quot;cm&amp;quot;),
    axis.title = element_text(size = 12, face = &amp;quot;bold&amp;quot;), 
    panel.spacing = unit(1, &amp;quot;lines&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/favstats/blw_surveys/blob/master/blw_viz_files/figure-gfm/unnamed-chunk-2-1.png?raw=true&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://github.com/favstats/blw_surveys/blob/master/blw_viz_files/figure-gfm/unnamed-chunk-2-1.png?raw=true&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ggsave_it(heatmap, width = 8.7, height = 7)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;At a first glance, there seems to be widespread agreement on the topic of gerrymandering. Most experts would say that U.S. democracy fails at meeting the standard of fair electoral districts (69% in Oct. 2018). Other issues that many expert respondents pointed out were low voter turnout, equal impact of votes and a common understanding of the facts (49-50% in Oct. 2018).&lt;/p&gt;

&lt;p&gt;If we consider the time dimension, we can observe that many ratings stay rather consistent over time.&lt;/p&gt;

&lt;p&gt;One change that stands out is from April to July 2018 on the question whether elections are free from foreign influence: a jump from 25 to 44% of experts who said that the U.S. does not meet this standard. This
stark increase might be explained by President Trump’s Helsinki summit which happened during the survey was in the field. At the summit, &lt;a href=&#34;https://www.washingtonpost.com/politics/americans-give-trump-negative-marks-for-helsinki-performance/2018/07/22/832ec2be-8d19-11e8-a345-a1bf7847b375_story.html&#34; target=&#34;_blank&#34;&gt;Trump made statements&lt;/a&gt; that suggested he believed Putin over the assessment of the U.S. intelligence service when it comes to Russian interference in the U.S. election.&lt;/p&gt;

&lt;p&gt;Another interesting jump concerncs the statement that the legislature
can limit executive power if need be. A jump from 12% of experts in
April to 22% in July and October 2018 say that the U.S. does not meet
this standard.&lt;/p&gt;

&lt;h2 id=&#34;public-survey&#34;&gt;Public Survey&lt;/h2&gt;

&lt;p&gt;Next, I complete the same procedure for the public survey. But first,
some data
wrangling:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;blw_public &amp;lt;- read_dta(unzip(&amp;quot;data/blw_data7&amp;quot;, files = &amp;quot;BLW_Public_Waves34567.dta&amp;quot;))

survey_dates_3 &amp;lt;- survey_dates[5:7]

not_na &amp;lt;- function(x) {
  !is.na(x)
}

n_public &amp;lt;- blw_public %&amp;gt;% 
  select(wave, weight, perf_misconduct:perf_investigations) %&amp;gt;%  
  mutate_all(not_na) %&amp;gt;% 
  colSums() %&amp;gt;% 
  as.vector() %&amp;gt;%
  sort() %&amp;gt;% 
  .[27]


blw_public_viz &amp;lt;- blw_public %&amp;gt;% 
  select(wave, weight, perf_misconduct:perf_investigations) %&amp;gt;% 
  gather(key, value, -wave, -weight) %&amp;gt;% 
  drop_na(value) %&amp;gt;% 
  mutate(standard = ifelse(value == 1, &amp;quot;Missing Standard&amp;quot;, &amp;quot;Anything Else&amp;quot;)) %&amp;gt;% 
  count(key, wave, standard, wt = weight) %&amp;gt;% 
  group_by(wave, key) %&amp;gt;% 
  mutate(total = sum(n)) %&amp;gt;% 
  mutate(perc = n / total) %&amp;gt;% 
  ungroup()  %&amp;gt;% 
  filter(standard == &amp;quot;Missing Standard&amp;quot;)  %&amp;gt;% 
  mutate(statements = case_when(
    key == &amp;quot;perf_ban_ideology&amp;quot; ~ &amp;quot;All parties allowed&amp;quot;,
    key == &amp;quot;perf_candidates_disclose&amp;quot; ~ &amp;quot;Candidates disclose info&amp;quot;,
    key == &amp;quot;perf_common_und&amp;quot; ~ &amp;quot;Common understanding of facts&amp;quot;,
    key == &amp;quot;perf_compromise&amp;quot; ~ &amp;quot;Compromise sought&amp;quot;,
    key == &amp;quot;perf_contributions&amp;quot; ~ &amp;quot;Contribs determine policy&amp;quot;,
    key == &amp;quot;perf_districts&amp;quot; ~ &amp;quot;Districts not biased&amp;quot;,
    key == &amp;quot;perf_election_fraud&amp;quot; ~ &amp;quot;Fraud-free elections&amp;quot;,
    key == &amp;quot;perf_equal_rights&amp;quot; ~ &amp;quot;Equal political/legal rights&amp;quot;,
    key == &amp;quot;perf_expand_executive&amp;quot; ~ &amp;quot;Constitution limits executive&amp;quot;,
    key == &amp;quot;perf_foreign&amp;quot; ~ &amp;quot;No foreign influence&amp;quot;,
    key == &amp;quot;perf_funds_transparent&amp;quot; ~ &amp;quot;Campaign funds transparent&amp;quot;,
    key == &amp;quot;perf_investigations&amp;quot; ~ &amp;quot;Investigations not compromised&amp;quot;,
    key == &amp;quot;perf_journalists&amp;quot; ~ &amp;quot;No interference with press&amp;quot;,
    key == &amp;quot;perf_judicial_ind&amp;quot; ~ &amp;quot;Judicial independence&amp;quot;,
    key == &amp;quot;perf_judiciary_check&amp;quot; ~ &amp;quot;Judiciary can limit executive&amp;quot;,
    key == &amp;quot;perf_legislature_check&amp;quot; ~ &amp;quot;Legislature can limit executive&amp;quot;,
    key == &amp;quot;perf_misconduct&amp;quot; ~ &amp;quot;Sanctions for misconduct&amp;quot;,
    key == &amp;quot;perf_monitor_opponents&amp;quot; ~ &amp;quot;Agencies not used against opp.&amp;quot;,
    key == &amp;quot;perf_opinions&amp;quot; ~ &amp;quot;Opinions heard on policy&amp;quot;,
    key == &amp;quot;perf_participation&amp;quot; ~ &amp;quot;Voter participation&amp;quot;,
    key == &amp;quot;perf_patriotism&amp;quot; ~ &amp;quot;Patriotism not questioned&amp;quot;,
    key == &amp;quot;perf_private_gain&amp;quot; ~ &amp;quot;No private gains from office&amp;quot;,
    key == &amp;quot;perf_private_violence&amp;quot; ~ &amp;quot;No political violence&amp;quot;,
    key == &amp;quot;perf_protest&amp;quot; ~ &amp;quot;Protest rights&amp;quot;,
    key == &amp;quot;perf_votes_impact&amp;quot; ~ &amp;quot;Votes have equal impact&amp;quot;,
    key == &amp;quot;perf_voting_rights&amp;quot; ~ &amp;quot;Equal voting rights&amp;quot;,
    key == &amp;quot;perf_free_speech&amp;quot; ~ &amp;quot;Free speech&amp;quot;,
    T ~ NA_character_
  )) %&amp;gt;% 
  mutate(statements = forcats::fct_reorder(statements, perc)) 
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## Warning: attributes are not identical across measure variables;
## they will be dropped
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now let’s investigate how the public evaluates American democracy:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;blw_public_viz %&amp;gt;%  
  ggplot(aes(wave, statements, fill = perc)) +
  geom_tile(alpha = 0.7) +
  ggpubr::theme_pubclean() +
  viridis::scale_fill_viridis(direction = -1, begin = 0.35, option = &amp;quot;B&amp;quot;) +
  geom_text(aes(label = round(perc * 100))) +
  scale_x_continuous(breaks = 5:7, labels = survey_dates_3) +
  labs(y = &amp;quot;&amp;quot;, x = &amp;quot;&amp;quot;, title = &amp;quot;Ratings of U.S. democratic (non-)performance - Public perceptions&amp;quot;,
       subtitle = &amp;quot;Percentage who answered &#39;U.S. does not meet this standard&#39;&amp;quot;,
       caption = glue::glue(&amp;quot;Data: Bright Line Watch expert survey results Wave 5 - 7\nN: {n_public} respondents; nationally representative samples&amp;quot;)) +
  guides(fill = F) +
  theme(strip.background = element_rect(fill = &amp;quot;gray93&amp;quot;, color = F), 
        legend.position = c(0.935, 0.075), 
    plot.title = element_text(size = 14, face = &amp;quot;bold&amp;quot;),
    plot.subtitle = element_text(size = 10, face = &amp;quot;italic&amp;quot;),
    strip.text = element_text(size = 10),
    plot.caption = element_text(size = 10, hjust = 0.9),
    legend.title = element_text(size = 12), 
    legend.text = element_text(size = 10),
    legend.key.height = unit(1, unit = &amp;quot;cm&amp;quot;),
    axis.title = element_text(size = 12, face = &amp;quot;bold&amp;quot;), 
    panel.spacing = unit(1, &amp;quot;lines&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/favstats/blw_surveys/blob/master/blw_viz_files/figure-gfm/unnamed-chunk-4-1.png?raw=true&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://github.com/favstats/blw_surveys/blob/master/blw_viz_files/figure-gfm/unnamed-chunk-4-1.png?raw=true&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ggsave_it(heatmap3, width = 8.5, height = 7)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Evaluations of U.S. democratic non-performance by the public remain
relatively stable over the three observation points in 2018.&lt;/p&gt;

&lt;p&gt;More than half of respondents in the public sample said that the U.S.
fails to meet the standard of government officials not misusing public
office for private gain (51% in October 2018). A majority of respondents
in the nationally representative sample also believe that political
opponents are smeared with accusations of disloyalty and a lack of
patriotism (53% in
October).&lt;/p&gt;

&lt;h2 id=&#34;experts-public&#34;&gt;Experts + Public&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;survey_dates &amp;lt;- c(&amp;quot;2/17&amp;quot;, &amp;quot;5/17&amp;quot;, &amp;quot;9/17&amp;quot;, &amp;quot;1/18&amp;quot;, &amp;quot;4/18&amp;quot;, &amp;quot;7/18&amp;quot;, &amp;quot;10/18&amp;quot;)


blw_public_viz %&amp;gt;% 
  mutate(Survey = &amp;quot;Public Sample&amp;quot;) %&amp;gt;% 
  bind_rows(blw_expert_viz %&amp;gt;%
              mutate(Survey = &amp;quot;Expert Sample&amp;quot;)) %&amp;gt;%  
  ggplot(aes(wave, perc, color = Survey)) +
  geom_line(alpha = 0.5, size = 0.5) +
  theme_minimal() +
  # viridis::scale_fill_viridis(direction = -1, begin = 0.25, option = &amp;quot;B&amp;quot;) +
  ggthemes::scale_color_gdocs() +
  geom_text(aes(label = round(perc * 100)), show.legend  = F) +
  scale_x_continuous(breaks = 1:7, labels = survey_dates) +
  scale_y_continuous(labels = scales::percent_format()) +
  labs(y = &amp;quot;&amp;quot;, x = &amp;quot;&amp;quot;, title = &amp;quot;Ratings of U.S. democratic (non-)performance - Expert vs. Public perceptions&amp;quot;,
       subtitle = &amp;quot;Percentage who answered &#39;U.S. does not meet this standard&#39;&amp;quot;,
       caption = glue::glue(&amp;quot;Data: Bright Line Watch expert survey results Wave 1 - 7\nExperts: {n_experts} Political Scientists at American colleges and universities\nPublic: {n_public} respondents; nationally representative samples&amp;quot;)) +
  guides(color = guide_legend(override.aes = list(size = 1.5))) +
  facet_wrap(~statements, nrow = 4) +
  theme(strip.background = element_rect(fill = &amp;quot;gray93&amp;quot;, color = F), 
        legend.position = c(0.935, 0.075), 
    plot.title = element_text(size = 18, face = &amp;quot;bold&amp;quot;),
    plot.subtitle = element_text(size = 14, face = &amp;quot;italic&amp;quot;),
    strip.text = element_text(size = 10),
    plot.caption = element_text(size = 10, hjust = 0.9),
    legend.title = element_text(size = 12), 
    legend.text = element_text(size = 10),
    legend.key.height = unit(1, unit = &amp;quot;cm&amp;quot;),
    axis.title = element_text(size = 12, face = &amp;quot;bold&amp;quot;), 
    panel.spacing = unit(1, &amp;quot;lines&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/favstats/blw_surveys/blob/master/blw_viz_files/figure-gfm/unnamed-chunk-5-1.png?raw=true&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://github.com/favstats/blw_surveys/blob/master/blw_viz_files/figure-gfm/unnamed-chunk-5-1.png?raw=true&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ggsave_it(lineplot, width = 16, height = 7)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When we directly compare public and expert evaluations, we can see that
the public seems to be somewhat more or at least as skeptical than
experts except for questions on adequate voter turnout, equal impact of
votes and fair electoral districts. On such issues, experts are more
likely to say that the U.S. does not meet this standard than the general
public.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Create awesome HTML slides with xaringan</title>
      <link>/post/xaringan_tut/</link>
      <pubDate>Sat, 29 Dec 2018 00:00:00 +0100</pubDate>
      
      <guid>/post/xaringan_tut/</guid>
      <description>

&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;There are many ways to create presentations with R Markdown. The package xaringan build by Rstudio employee Yihui Xie is one possiblity to create impressionable HTML5 slides that really stand out. It&amp;rsquo;s beautiful layout and concise and tidy coding structure makes it a charm to work with. It&amp;rsquo;s build on the remark.js library and if you want to learn more about it you can do this &lt;a href=&#34;https://remark.js.org/&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;. Here are some example slides by the creator which also serves as an introduction:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://slides.yihui.name/xaringan/&#34; target=&#34;_blank&#34;&gt;https://slides.yihui.name/xaringan/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Are you ready to become a &lt;strong&gt;presentation ninja&lt;/strong&gt;?&lt;/p&gt;

&lt;h2 id=&#34;installation&#34;&gt;Installation&lt;/h2&gt;

&lt;p&gt;There is multiple ways to install packages in R. One safe bet is to install the xaringan package from CRAN, as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r, echo=T, eval=F&#34;&gt;install.packages(&amp;quot;xaringan&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Sometimes the versions on CRAN are somewhat older. If you are interested in the newest version, one option is to always look for the related (GitHub) repository. To install it from here you need to first install the devtools package in case you don&amp;rsquo;t have it and then use install_github(&amp;ldquo;yihui/xaringan&amp;rdquo;) to install the package from GitHub.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r, echo=T, eval=F&#34;&gt;## only install devtools if needed ##
#install.packages(devtools)

devtools::install_github(&#39;yihui/xaringan&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To create a xaringan presentation, you create an R Markdown document with the xaringan::moon_reader output format. From within RStudio, it is easy to get started. First click on the New File icon below File and then on R Markdown:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.favstats.eu/img/rmarkdown.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Next select &amp;ldquo;From Template&amp;rdquo; then Ninja Presentation, and you will see an R Markdown example.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.favstats.eu/img/ninja_presentation.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Press the Knit button to compile it.&lt;/p&gt;

&lt;h2 id=&#34;basics&#34;&gt;Basics&lt;/h2&gt;

&lt;p&gt;As is the norm with any R Markdown document, there is a yaml header at the beginning which specifies some meta data. Here you can put in the title of the presentation, authors and more. This will configure the title slide. Much more can be done here to customize how your slides will look like but for now we stick with the basics. Here is how your yaml header could look like:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.favstats.eu/img/yaml.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;This gives us the following title slide:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.favstats.eu/img/titleslide.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;So how are slides created with xaringan? Easy!&lt;/p&gt;

&lt;p&gt;Overall, regular R Markdown rules apply so you can use this for &lt;em&gt;italic&lt;/em&gt; and two stars for &lt;strong&gt;bold&lt;/strong&gt; for example or even your most complicated LaTeX equations.&lt;/p&gt;

&lt;p&gt;The # before a line of text creates a header for the slide and the more hashtags you add the smaller is the header&lt;/p&gt;

&lt;p&gt;Slides are then seperated with three lines &lt;code&gt;---&lt;/code&gt;. For the first slide you don&amp;rsquo;t need to do this because it is already implied after the yaml header.&lt;/p&gt;

&lt;p&gt;If we wanted to let elements on the slides appear with a click, we seperate them with two lines &lt;code&gt;--&lt;/code&gt; like this.&lt;/p&gt;

&lt;p&gt;Lastly, if we want to have more space between the elements on a slide we can use the html tag &lt;code&gt;&amp;lt;br&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You could start with something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r, echo=T, eval=F&#34;&gt;# Slide 1

This is slide 1

* Item 1
* Item 2
    + Item 2a
    + Item 2b
  

---

# Slide 2

This is slide 2

Here is a complicated equation:

$$S (ω)=1.466\, H_s^2 \,  \frac{ω_0^5}{ω^6 }  \, e^[-3^ { ω/(ω_0  )]^2}$$

---

# Slide 3

This is slide 3

--

This will appear on click

--

&amp;lt;br&amp;gt;
&amp;lt;br&amp;gt;

This will appear on click but a bit farther away
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is how this would look like:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.favstats.eu/img/slides1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;This looks awesome already!&lt;/p&gt;

&lt;h2 id=&#34;formatting-slides&#34;&gt;Formatting Slides&lt;/h2&gt;

&lt;p&gt;Let&amp;rsquo;s say we want to play around a bit with the format of our slides. There are some build in functions that lets us do exactly that.&lt;/p&gt;

&lt;p&gt;We specify the following code at the beginning of a slide:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;class: inverse, center, middle&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This will inverse the color (here: black) center the elements horizontally (center) and vertically (middle) on that slide. This makes for some pretty cool transition slides.&lt;/p&gt;

&lt;p&gt;Here is an example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r, echo=T, eval=F&#34;&gt;---

class: inverse, center, middle

# Statistical Analysis

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Which produces the following slide:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.favstats.eu/img/transitionslide.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;adding-a-gif-or-an-image&#34;&gt;Adding a GIF or an Image&lt;/h2&gt;

&lt;p&gt;You can also add GIFs or images to your slides. It&amp;rsquo;s done exactly in the same way as you would with a normal R Markdown document. Here is an example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r, echo=T, eval=F&#34;&gt;---

class: inverse, center, middle

![](https://www.ukcophumour.co.uk/wp-content/uploads/f2w/1526816_674334732588821_1244473478_n.jpg)

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;http://www.favstats.eu/img/image.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;using-themes-and-xaringanthemer&#34;&gt;using themes and xaringanthemer&lt;/h2&gt;

&lt;p&gt;We&amp;rsquo;ve already come a long way creating nice xaringan slides. If we wanted to customize the theme of the presentation, xaringan comes with some build-in color schemes that you can try out.&lt;/p&gt;

&lt;p&gt;Here is one of them. Just add the following line in your YAML header and you are good to go:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r, echo=T, eval=F&#34;&gt;output:
  xaringan::moon_reader:
    css: [metropolis]

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This looks like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.favstats.eu/img/metropolis.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Here is a list of themes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;metropolis&lt;/li&gt;
&lt;li&gt;hygge&lt;/li&gt;
&lt;li&gt;rladies&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you want to create your own themes I can recommend the xaringanthemer package:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/gadenbuie/xaringanthemer&#34; target=&#34;_blank&#34;&gt;https://github.com/gadenbuie/xaringanthemer&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;exporting-the-presentation-to-pdf&#34;&gt;Exporting the presentation to .pdf&lt;/h2&gt;

&lt;p&gt;The output format of xaringan is html. However, if you want a .pdf file you could just simply open the slides in your favorite web browser and print them to .pdf. This seems to be the easiest version to do it.&lt;/p&gt;

&lt;h2 id=&#34;what-now&#34;&gt;What Now?&lt;/h2&gt;

&lt;p&gt;I hope you enjoyed this little tutorial!&lt;/p&gt;

&lt;p&gt;Here are some more examples of beautiful xaringan slides that can serve as your inspiration:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/favstats/xaringan_slides/&#34; target=&#34;_blank&#34;&gt;https://github.com/favstats/xaringan_slides/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You want to add animated transitions? Well, here&amp;rsquo;s an implementation of that:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.garrickadenbuie.com/blog/2018/12/03/animate-xaringan-slide-transitions/&#34; target=&#34;_blank&#34;&gt;https://www.garrickadenbuie.com/blog/2018/12/03/animate-xaringan-slide-transitions/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Lastly, a wiki helps to implement more advanced options. Be sure to check it out at some point:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/yihui/xaringan/wiki&#34; target=&#34;_blank&#34;&gt;https://github.com/yihui/xaringan/wiki&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>538 Predictions for the 2018 Midterm Elections</title>
      <link>/post/538_midterms/</link>
      <pubDate>Fri, 09 Nov 2018 00:00:00 +0100</pubDate>
      
      <guid>/post/538_midterms/</guid>
      <description>

&lt;h2 id=&#34;packages&#34;&gt;Packages&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Install these packages if you don&#39;t have them yet
# if (!require(&amp;quot;pacman&amp;quot;)) install.packages(&amp;quot;pacman&amp;quot;)
# devtools::install_github(&amp;quot;favstats/tidytemplate&amp;quot;)

pacman::p_load(tidyverse, tidytemplate, janitor, ggthemes, ggpubr, rvest, ggrepel)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;load-data&#34;&gt;Load Data&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;csv_link &amp;lt;- &amp;quot;https://blogs.sciencemag.org/sciencehound/wp-content/uploads/sites/5/2018/11/Congressional-election-results-and-forecasts.csv&amp;quot;

pred_dat &amp;lt;- read_csv(csv_link) %&amp;gt;% 
  clean_names() %&amp;gt;% 
  mutate(close = ifelse(election_results &amp;lt;= 55 &amp;amp; election_results &amp;gt;= 45, &amp;quot;Close&amp;quot;, &amp;quot;Safe&amp;quot;)) %&amp;gt;% 
  left_join(tibble(state = state.name, abbr =state.abb)) %&amp;gt;% 
  mutate(distr_abbr = paste0(abbr, district))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;pred_dat
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## # A tibble: 435 x 14
##    state district democratic_cand~ republican_cand~ election_results
##    &amp;lt;chr&amp;gt;    &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt;            &amp;lt;chr&amp;gt;                       &amp;lt;dbl&amp;gt;
##  1 Alab~        1 Kennedy          Byrne                        36.7
##  2 Alab~        2 Isner            Roby                         38.5
##  3 Alab~        3 Hagan            Rogers                       36.2
##  4 Alab~        4 Auman            Aderholt                     20.1
##  5 Alab~        5 Joffrion         Brooks                       38.9
##  6 Alab~        6 Kline            Palmer                       30.7
##  7 Alab~        7 Sewell           -                           100  
##  8 Alas~        1 Glavin           Young                        46  
##  9 Ariz~        1 O&#39;Halleran       Rogers                       53.8
## 10 Ariz~        2 Kirkpatrick      Peterson                     54.4
## # ... with 425 more rows, and 9 more variables: predicted_lite &amp;lt;dbl&amp;gt;,
## #   predicted_classic &amp;lt;dbl&amp;gt;, predicted_deluxe &amp;lt;dbl&amp;gt;,
## #   predicted_probability_deluxe &amp;lt;dbl&amp;gt;, correct_deluxe &amp;lt;int&amp;gt;,
## #   democratic_win &amp;lt;int&amp;gt;, close &amp;lt;chr&amp;gt;, abbr &amp;lt;chr&amp;gt;, distr_abbr &amp;lt;chr&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;how-did-538-predictions-fare-in-the-2018-midterm-elections&#34;&gt;How did 538 Predictions fare in the 2018 Midterm Elections?&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;text_dat &amp;lt;- pred_dat %&amp;gt;% 
  count(correct_deluxe) %&amp;gt;%
  spread(correct_deluxe, n) %&amp;gt;% 
  rename(incorrect = `0`, correct = `1`) %&amp;gt;%
  mutate(total = (incorrect + correct)) %&amp;gt;% 
  mutate(perc_correct = round(((correct / total)*100), 2)) %&amp;gt;% 
  mutate(label = glue::glue(&amp;quot;538 predicted {correct} out of {total} races correctly ({perc_correct}%)&amp;quot;))

pred_dat %&amp;gt;% 
  mutate(correct_deluxe = as.factor(correct_deluxe)) %&amp;gt;% 
  ggplot(aes(predicted_deluxe, election_results)) +
  geom_point(aes(color = correct_deluxe)) +
  theme_minimal() +
  scale_color_colorblind() +
  geom_smooth(method = &amp;quot;lm&amp;quot;, color = &amp;quot;black&amp;quot;, alpha = 0.4) +
  theme(legend.position = &amp;quot;bottom&amp;quot;) +
  geom_text(data = text_dat, aes(x = 22, y = 97, label = label)) + 
  labs(title = &amp;quot;How did 538 Predictions fare in the 2018 Midterm Elections?&amp;quot;,
       x=&amp;quot;Forecast from 538 Deluxe forecast % for Democratic candidates&amp;quot;, 
       y=&amp;quot;Actual % for Democratic candidates from the election&amp;quot;,
       subtitle = &amp;quot;Black dots show 10 races that were wrongly predicted&amp;quot;,
       caption = &amp;quot;favstats.eu; @favstats\nData: @jeremymberg&amp;quot;)  +
  guides(color = F)  +
  theme(plot.title = element_text(size = 13, face = &amp;quot;bold&amp;quot;),
    plot.subtitle = element_text(size = 11, face = &amp;quot;italic&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://github.com/favstats/538_pred_results/blob/master/538_preds_files/figure-gfm/unnamed-chunk-2-1.png?raw=true&#34; alt=&#34;&#34; /&gt;&lt;!-- --&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ggsave_it(pred1, width = 10, height = 6)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;how-did-538-predictions-fare-in-the-2018-midterm-elections-close-races&#34;&gt;How did 538 Predictions fare in the 2018 Midterm Elections? - Close Races&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;pred_dat %&amp;gt;% 
  ggplot(aes(predicted_deluxe, election_results)) +
  geom_point(aes(color = close)) +
  theme_minimal() +
  scale_color_colorblind() +
  geom_hline(yintercept = 55, linetype = &amp;quot;dashed&amp;quot;) +
  geom_hline(yintercept = 45, linetype = &amp;quot;dashed&amp;quot;) +
  geom_smooth(method = &amp;quot;lm&amp;quot;, color = &amp;quot;black&amp;quot;, alpha = 0.4) +
  theme(legend.position = &amp;quot;bottom&amp;quot;) +
  stat_cor() +
  labs(title = &amp;quot;How did 538 Predictions fare in the 2018 Midterm Elections?&amp;quot;,
       x=&amp;quot;Forecast from 538 Deluxe forecast % for Democratic candidates&amp;quot;,
       y=&amp;quot;Actual % for Democratic candidates from the election&amp;quot;,
       subtitle = &amp;quot;Black dots show 89 races that were close&amp;quot;,
       caption = &amp;quot;favstats.eu; @favstats\nData: @jeremymberg&amp;quot;)  +
  guides(color = F)  +
  theme(plot.title = element_text(size = 13, face = &amp;quot;bold&amp;quot;),
    plot.subtitle = element_text(size = 11, face = &amp;quot;italic&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://github.com/favstats/538_pred_results/blob/master/538_preds_files/figure-gfm/unnamed-chunk-3-1.png?raw=true&#34; alt=&#34;&#34; /&gt;&lt;!-- --&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ggsave_it(pred2, width = 10, height = 6)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;how-did-538-predictions-fare-in-the-2018-midterm-elections-close-races-ii&#34;&gt;How did 538 Predictions fare in the 2018 Midterm Elections? - Close Races II&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;pred_dat %&amp;gt;% 
  mutate(correct_deluxe = as.factor(correct_deluxe)) %&amp;gt;% 
  filter(close == &amp;quot;Close&amp;quot;) %&amp;gt;% 
  ggplot(aes(predicted_deluxe, election_results)) +
  geom_point(aes(color = correct_deluxe)) +
  theme_minimal() +
  geom_hline(yintercept = 50, linetype = &amp;quot;dashed&amp;quot;) +
  scale_color_colorblind() +
  scale_y_continuous(breaks = c(45, 50, 55)) +
  geom_smooth(method = &amp;quot;lm&amp;quot;, color = &amp;quot;black&amp;quot;, alpha = 0.4) +
  geom_text_repel(data = pred_dat %&amp;gt;% filter(correct_deluxe == 0), aes(label = distr_abbr)) +
  theme(legend.position = &amp;quot;bottom&amp;quot;) +
  stat_cor() +
  labs(title = &amp;quot;How did 538 Predictions fare in the 2018 Midterm Elections?&amp;quot;,
       x=&amp;quot;Forecast from 538 Deluxe forecast % for Democratic candidates&amp;quot;, 
       y=&amp;quot;Actual % for Democratic candidates from the election&amp;quot;,
       subtitle = &amp;quot;Black dots show 10 races that were wrongly predicted&amp;quot;,
       caption = &amp;quot;favstats.eu; @favstats\nData: @jeremymberg&amp;quot;)  +
  guides(color = F)  +
  theme(plot.title = element_text(size = 13, face = &amp;quot;bold&amp;quot;),
    plot.subtitle = element_text(size = 11, face = &amp;quot;italic&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://github.com/favstats/538_pred_results/blob/master/538_preds_files/figure-gfm/analysis-1.png?raw=true&#34; alt=&#34;&#34; /&gt;&lt;!-- --&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ggsave_it(pred3, width = 10, height = 6)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;how-did-538-predictions-fare-in-the-2018-midterm-elections-prediction&#34;&gt;How did 538 Predictions fare in the 2018 Midterm Elections? - Prediction&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;hist_dat &amp;lt;- pred_dat %&amp;gt;% 
  mutate(diff = abs(election_results - predicted_deluxe)) %&amp;gt;% 
  arrange(desc(diff)) 

difference &amp;lt;- mean(hist_dat$diff) %&amp;gt;% round(2)

hist_dat %&amp;gt;% 
  ggplot(aes(diff)) +
  theme_minimal() +
  geom_histogram(alpha = 0.75) +
  geom_vline(xintercept = difference, linetype = &amp;quot;dashed&amp;quot;) +
  geom_text(aes(x = difference + .5, y = 62, label = difference)) +
  labs(title = &amp;quot;How did 538 Predictions fare in the 2018 Midterm Elections?&amp;quot;,
       x=&amp;quot;Absolute Difference between 538 Forecast and Results in %&amp;quot;, 
       y=&amp;quot;Frequency&amp;quot;,
       caption = &amp;quot;favstats.eu; @favstats\nData: @jeremymberg&amp;quot;)  +
  guides(color = F)  +
  theme(plot.title = element_text(size = 13, face = &amp;quot;bold&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://github.com/favstats/538_pred_results/blob/master/538_preds_files/figure-gfm/unnamed-chunk-4-1.png?raw=true&#34; alt=&#34;&#34; /&gt;&lt;!-- --&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ggsave_it(pred4, width = 10, height = 6)
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>How did Candidates endorsed by Trump fare in the 2018 Midterm Elections?</title>
      <link>/post/trump_endorsements/</link>
      <pubDate>Thu, 08 Nov 2018 00:00:00 +0100</pubDate>
      
      <guid>/post/trump_endorsements/</guid>
      <description>

&lt;p&gt;Data
Sources:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.mcclatchydc.com/news/politics-government/election/midterms/article221145845.html&#34; target=&#34;_blank&#34;&gt;https://www.mcclatchydc.com/news/politics-government/election/midterms/article221145845.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.politico.com/story/2018/11/07/2018-election-results-trump-endorsements-967767&#34; target=&#34;_blank&#34;&gt;https://www.politico.com/story/2018/11/07/2018-election-results-trump-endorsements-967767&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;packages&#34;&gt;Packages&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# devtools::install_github(&amp;quot;favstats/tidytemplate&amp;quot;)
# install.packages(&amp;quot;pacman&amp;quot;)
pacman::p_load(tidyverse, rvest, qdapRegex, ggthemes, tidytemplate, rtweet)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;including-plots&#34;&gt;Including Plots&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;candidate &amp;lt;- read_html(&amp;quot;https://www.mcclatchydc.com/news/politics-government/election/midterms/article221145845.html&amp;quot;) %&amp;gt;% 
  html_nodes(&amp;quot;#content-body- li&amp;quot;) %&amp;gt;% 
  html_text()

mcclatch &amp;lt;- tibble(candidate) %&amp;gt;% 
    mutate(won = case_when(
        str_detect(candidate, &amp;quot;✓&amp;quot;) ~ &amp;quot;Won&amp;quot;, 
        str_detect(candidate, &amp;quot;✗&amp;quot;) ~ &amp;quot;Lost&amp;quot;, 
        T~ &amp;quot;Undecided&amp;quot;)) %&amp;gt;% 
    mutate(type = case_when(
        str_detect(candidate, &amp;quot;House&amp;quot;) ~ &amp;quot;House&amp;quot;, 
        str_detect(candidate, &amp;quot;Senate|senator&amp;quot;) ~ &amp;quot;Senate&amp;quot;, 
        str_detect(candidate, &amp;quot;governor|gubernatorial&amp;quot;) ~ &amp;quot;Governor&amp;quot;)) %&amp;gt;% 
    mutate(incumbent = ifelse(str_detect(candidate, &amp;quot;incumbent|Incumbent&amp;quot;), &amp;quot;Incumbent&amp;quot;, &amp;quot;Not Incumbent&amp;quot;)) %&amp;gt;% 
    mutate(candidate = str_remove(candidate, &amp;quot;✓|✗&amp;quot;) %&amp;gt;% str_trim()) %&amp;gt;% 
    mutate(candidate = str_extract(candidate, &amp;quot;.+?(?=,)&amp;quot;)) %&amp;gt;% 
    mutate(candidate = str_remove(candidate, &amp;quot;\\(GOING TO RECOUNT\\) &amp;quot;)) %&amp;gt;% 
    mutate(candidate = str_remove(candidate, &amp;quot;Runoff: &amp;quot;))

mcclatch
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## # A tibble: 88 x 4
##    candidate        won       type     incumbent    
##    &amp;lt;chr&amp;gt;            &amp;lt;chr&amp;gt;     &amp;lt;chr&amp;gt;    &amp;lt;chr&amp;gt;        
##  1 &amp;lt;U+2713&amp;gt; Martha Roby    Undecided House    Incumbent    
##  2 &amp;lt;U+2713&amp;gt; Mike Dunleavy  Undecided Governor Not Incumbent
##  3 Martha McSally   Undecided Senate   Not Incumbent
##  4 &amp;lt;U+2713&amp;gt; Andy Biggs     Undecided House    Incumbent    
##  5 &amp;lt;U+2713&amp;gt; Doug Ducey     Undecided Governor Incumbent    
##  6 &amp;lt;U+2713&amp;gt; Asa Hutchinson Undecided Governor Incumbent    
##  7 Dana Rohrabacher Undecided House    Incumbent    
##  8 &amp;lt;U+2713&amp;gt; Devin Nunes    Undecided House    Incumbent    
##  9 &amp;lt;U+2717&amp;gt;  Diane Harkey  Undecided House    Not Incumbent
## 10 &amp;lt;U+2713&amp;gt; Kevin McCarthy Undecided House    Incumbent    
## # ... with 78 more rows

## # A tibble: 95 x 3
##    candidate      won       type    
##    &amp;lt;chr&amp;gt;          &amp;lt;chr&amp;gt;     &amp;lt;chr&amp;gt;   
##  1 Martha Roby    Won       House   
##  2 Mike Dunleavy  Undecided Governor
##  3 Martha McSally Undecided House   
##  4 Andy Biggs     Won       House   
##  5 Doug Ducey     Won       Governor
##  6 Asa Hutchinson Won       Governor
##  7 Paul Cook      Won       House   
##  8 Diane Harkey   Undecided House   
##  9 Devin Nunes    Won       House   
## 10 Kevin McCarthy Won       House   
## # ... with 85 more rows
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;checking-for-missings-errors-disagreements-between-data-sources&#34;&gt;Checking for Missings/Errors/Disagreements between Data Sources&lt;/h2&gt;

&lt;p&gt;Let’s merge the datasets and see if we find any errors.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;politico %&amp;gt;% 
  full_join(mcclatch, by = &amp;quot;candidate&amp;quot;) %&amp;gt;% 
  filter(is.na(won.x) | is.na(won.y))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## # A tibble: 169 x 6
##    candidate      won.x     type.x   won.y type.y incumbent
##    &amp;lt;chr&amp;gt;          &amp;lt;chr&amp;gt;     &amp;lt;chr&amp;gt;    &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;  &amp;lt;chr&amp;gt;    
##  1 Martha Roby    Won       House    &amp;lt;NA&amp;gt;  &amp;lt;NA&amp;gt;   &amp;lt;NA&amp;gt;     
##  2 Mike Dunleavy  Undecided Governor &amp;lt;NA&amp;gt;  &amp;lt;NA&amp;gt;   &amp;lt;NA&amp;gt;     
##  3 Andy Biggs     Won       House    &amp;lt;NA&amp;gt;  &amp;lt;NA&amp;gt;   &amp;lt;NA&amp;gt;     
##  4 Doug Ducey     Won       Governor &amp;lt;NA&amp;gt;  &amp;lt;NA&amp;gt;   &amp;lt;NA&amp;gt;     
##  5 Asa Hutchinson Won       Governor &amp;lt;NA&amp;gt;  &amp;lt;NA&amp;gt;   &amp;lt;NA&amp;gt;     
##  6 Paul Cook      Won       House    &amp;lt;NA&amp;gt;  &amp;lt;NA&amp;gt;   &amp;lt;NA&amp;gt;     
##  7 Diane Harkey   Undecided House    &amp;lt;NA&amp;gt;  &amp;lt;NA&amp;gt;   &amp;lt;NA&amp;gt;     
##  8 Devin Nunes    Won       House    &amp;lt;NA&amp;gt;  &amp;lt;NA&amp;gt;   &amp;lt;NA&amp;gt;     
##  9 Kevin McCarthy Won       House    &amp;lt;NA&amp;gt;  &amp;lt;NA&amp;gt;   &amp;lt;NA&amp;gt;     
## 10 John Cox       Lost      Governor &amp;lt;NA&amp;gt;  &amp;lt;NA&amp;gt;   &amp;lt;NA&amp;gt;     
## # ... with 159 more rows
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Politico misspelled Patrick Morrisey.&lt;/p&gt;

&lt;p&gt;Politico has more candidates but they did not include Mike Kelly.&lt;/p&gt;

&lt;p&gt;Fix:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;politico &amp;lt;- politico %&amp;gt;% 
  mutate(candidate = ifelse(candidate == &amp;quot;Patrick Morrissey&amp;quot;, &amp;quot;Patrick Morrisey&amp;quot;, candidate))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Do the datasets disagree on whether the candidate ran for House or
Senate?&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;politico %&amp;gt;% 
  left_join(mcclatch, by = &amp;quot;candidate&amp;quot;) %&amp;gt;% 
  filter(type.x != type.y)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## # A tibble: 1 x 6
##   candidate      won.x     type.x won.y     type.y incumbent    
##   &amp;lt;chr&amp;gt;          &amp;lt;chr&amp;gt;     &amp;lt;chr&amp;gt;  &amp;lt;chr&amp;gt;     &amp;lt;chr&amp;gt;  &amp;lt;chr&amp;gt;        
## 1 Martha McSally Undecided House  Undecided Senate Not Incumbent
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Politico states that Martha McSally ran for the House of Representatives
but this information seems to be wrong. She ran for Senate.&lt;/p&gt;

&lt;p&gt;-&amp;gt; &lt;a href=&#34;https://mcsallyforsenate.com/&#34; target=&#34;_blank&#34;&gt;https://mcsallyforsenate.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Fix:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;politico &amp;lt;- politico %&amp;gt;% 
  mutate(type = ifelse(candidate ==  &amp;quot;Martha McSally&amp;quot;, &amp;quot;Senate&amp;quot;, type)) 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Do the datasets disagree on whether a race was lost/won?&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;politico %&amp;gt;% 
  left_join(mcclatch, by = &amp;quot;candidate&amp;quot;) %&amp;gt;% 
  filter(won.x != won.y)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## # A tibble: 1 x 6
##   candidate      won.x type.x won.y     type.y incumbent
##   &amp;lt;chr&amp;gt;          &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;  &amp;lt;chr&amp;gt;     &amp;lt;chr&amp;gt;  &amp;lt;chr&amp;gt;    
## 1 Claudia Tenney Lost  House  Undecided House  Incumbent
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Politico seems to not have updated Mike Dunleavy’s win yet (via The
Associated Press).&lt;/p&gt;

&lt;p&gt;Data sources disagree on Diane Harkey. She is indeed projected to lose
(via The Associated Press).&lt;/p&gt;

&lt;p&gt;Rick Scott is in the lead in the Senate Race (via The Associated Press).&lt;/p&gt;

&lt;p&gt;Data sources also disagree on Claudia Tenney. Probably lost the race
(via The Associated Press).&lt;/p&gt;

&lt;p&gt;Fix:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;politico &amp;lt;- politico %&amp;gt;% 
  mutate(won = ifelse(candidate == &amp;quot;Diane Harkey&amp;quot;, &amp;quot;Lost&amp;quot;, won)) %&amp;gt;% 
  mutate(won = ifelse(candidate == &amp;quot;Mike Dunleavy&amp;quot;, &amp;quot;Won&amp;quot;, won))  %&amp;gt;% 
  mutate(won = ifelse(candidate == &amp;quot;Rick Scott&amp;quot;, &amp;quot;Won&amp;quot;, won))  

mcclatch &amp;lt;- mcclatch %&amp;gt;% 
  mutate(won = ifelse(candidate == &amp;quot;Claudia Tenney&amp;quot;, &amp;quot;Lost&amp;quot;, won)) 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;No errors left :)&lt;/p&gt;

&lt;p&gt;We can now use the Politico dataset as base, as it is the most complete
dataset:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;trump_endorsements &amp;lt;- politico  %&amp;gt;% 
  left_join(mcclatch, by = &amp;quot;candidate&amp;quot;) %&amp;gt;% 
  rename(results = won.x) %&amp;gt;% 
  rename(type = type.x) %&amp;gt;% 
  select(candidate, results, type, incumbent) %&amp;gt;% 
  arrange(candidate)

trump_endorsements
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## # A tibble: 95 x 4
##    candidate       results   type     incumbent    
##    &amp;lt;chr&amp;gt;           &amp;lt;chr&amp;gt;     &amp;lt;chr&amp;gt;    &amp;lt;chr&amp;gt;        
##  1 Adam Laxalt     Lost      Governor &amp;lt;NA&amp;gt;         
##  2 Andy Barr       Won       House    &amp;lt;NA&amp;gt;         
##  3 Andy Biggs      Won       House    &amp;lt;NA&amp;gt;         
##  4 Asa Hutchinson  Won       Governor &amp;lt;NA&amp;gt;         
##  5 Bill Lee        Won       Governor &amp;lt;NA&amp;gt;         
##  6 Bill Schuette   Lost      Governor &amp;lt;NA&amp;gt;         
##  7 Bob Hugin       Lost      Senate   &amp;lt;NA&amp;gt;         
##  8 Bob Stefanowski Lost      Governor &amp;lt;NA&amp;gt;         
##  9 Brian Kemp      Undecided Governor Not Incumbent
## 10 Bruce Poliquin  Undecided House    Incumbent    
## # ... with 85 more rows
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;gissisim-data&#34;&gt;@GissiSim Data&lt;/h2&gt;

&lt;p&gt;@GissiSim on Twitter collected some Trump Endorsements as well. Let’s
check them out:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;token &amp;lt;- readRDS(&amp;quot;.rtweet.rds&amp;quot;)

tml &amp;lt;- get_timelines(&amp;quot;GissiSim&amp;quot;, n = 500, token = token)



save_it(tml)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;tml &amp;lt;- load_it(&amp;quot;data/tml.Rdata&amp;quot;)

lastnames &amp;lt;- trump_endorsements %&amp;gt;% 
  mutate(lastname = str_remove(candidate, &amp;quot;.+?(?= )&amp;quot;) %&amp;gt;% str_trim) %&amp;gt;% 
  .$lastname %&amp;gt;% paste0(collapse = &amp;quot;|&amp;quot;)

tml %&amp;gt;% 
  filter(str_detect(text, &amp;quot;lost&amp;quot;)) %&amp;gt;% 
  filter(!(str_detect(text, &amp;quot;Please let me know|That&#39;s 31|15 Trump|lost souls|democracy lost&amp;quot;))) %&amp;gt;%
  select(screen_name, text) %&amp;gt;% 
  mutate(lastnames = str_detect(text, lastnames)) %&amp;gt;% 
  filter(!(lastnames))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## # A tibble: 2 x 3
##   screen_name text                                                lastnames
##   &amp;lt;chr&amp;gt;       &amp;lt;chr&amp;gt;                                               &amp;lt;lgl&amp;gt;    
## 1 GissiSim    &amp;quot;Handel lost 51% to 50%\n\nhttps://t.co/TJZPJYGzR1&amp;quot; FALSE    
## 2 GissiSim    Randy lost 52% to 48% https://t.co/GlmUBxdHcz       FALSE
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Karen Handel is not in the dataset but did receive an endorsement in
2017.&lt;/p&gt;

&lt;p&gt;Randy is the first name of Randy Hultgren who is already in dataset.&lt;/p&gt;

&lt;p&gt;Fix:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;trump_endorsements &amp;lt;- trump_endorsements %&amp;gt;% 
  rbind(c(&amp;quot;Karen Handel&amp;quot;, &amp;quot;Lost&amp;quot;, &amp;quot;House&amp;quot;, &amp;quot;Incumbent&amp;quot;))

save_it(trump_endorsements)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;plotting-the-data&#34;&gt;Plotting the Data&lt;/h2&gt;

&lt;p&gt;Let’s plot the data now :)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;gg_dat &amp;lt;- trump_endorsements %&amp;gt;% 
  group_by(results, type) %&amp;gt;% 
  tally() %&amp;gt;% 
  ungroup()%&amp;gt;% 
  group_by(type) %&amp;gt;% 
  mutate(total = sum(n)) %&amp;gt;% 
  ungroup() 

gg_text &amp;lt;- gg_dat %&amp;gt;% 
  filter(results == &amp;quot;Won&amp;quot;) %&amp;gt;% 
  mutate(perc = tidytemplate::get_percentage(n, total, 2)) %&amp;gt;% 
  mutate(text = paste0(n, &amp;quot; out of &amp;quot;, total, &amp;quot; won (&amp;quot;, perc,&amp;quot;%)&amp;quot;))

gg_dat %&amp;gt;% 
  ggplot(aes(results, n, fill = results)) +
  geom_col(alpha = 0.75) +
  facet_wrap(~type) +
  theme_hc() +
  scale_fill_colorblind() +
  guides(fill = F) +
  labs(x = &amp;quot;&amp;quot;, y = &amp;quot;&amp;quot;,
       caption = &amp;quot;Data: Politico &amp;amp; McClatchy Articles and Gissur Simonarson (@GissiSim)\nfavstats.eu; @favstats&amp;quot;) +
  geom_text(aes(label = n), nudge_y = 1) +
  geom_text(data = gg_text, aes(x = 1.5, y = 31, label = text)) +
  ggtitle(&amp;quot;How did Candidates endorsed by Trump fare in the 2018 Midterm Elections?\n&amp;quot;)  +
  theme(legend.text = element_text(size = 8),
    axis.title = element_text(size = 10, face = &amp;quot;bold&amp;quot;),
    plot.title = element_text(size = 14, face = &amp;quot;bold&amp;quot;, hjust = 0),
    plot.caption = element_text(size = 10),
    legend.position = &amp;quot;bottom&amp;quot;,
    legend.title = element_text(size = 8), 
    ) 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/favstats/trump_endorsements/blob/master/images/gg_freqs.png?raw=true&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://github.com/favstats/trump_endorsements/blob/master/images/gg_freqs.png?raw=true&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ggsave_it(gg_freqs, width = 10, height = 6)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Plot by incumbents:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;gg_dat2 &amp;lt;- trump_endorsements %&amp;gt;% 
  group_by(results, incumbent) %&amp;gt;% 
  tally() %&amp;gt;% 
  ungroup()%&amp;gt;% 
  group_by(incumbent) %&amp;gt;% 
  mutate(total = sum(n)) %&amp;gt;% 
  ungroup() %&amp;gt;% 
  drop_na(incumbent)

gg_text2 &amp;lt;- gg_dat2 %&amp;gt;% 
  filter(results == &amp;quot;Won&amp;quot;) %&amp;gt;% 
  mutate(perc = tidytemplate::get_percentage(n, total, 2)) %&amp;gt;% 
  mutate(text = paste0(n, &amp;quot; out of &amp;quot;, total, &amp;quot; won (&amp;quot;, perc,&amp;quot;%)&amp;quot;))

gg_dat2 %&amp;gt;% 
  ggplot(aes(results, n, fill = results)) +
  geom_col(alpha = 0.75) +
  facet_wrap(~incumbent) +
  theme_hc() +
  scale_fill_colorblind() +
  guides(fill = F) +
  labs(x = &amp;quot;&amp;quot;, y = &amp;quot;&amp;quot;,
       caption = &amp;quot;Data: Politico &amp;amp; McClatchy Articles and Gissur Simonarson (@GissiSim)\nfavstats.eu; @favstats&amp;quot;) +
  geom_text(aes(label = n), nudge_y = 1) +
#  geom_text(data = gg_text2, aes(x = 1.5, y = 31, label = text)) +
  ggtitle(&amp;quot;How did Candidates endorsed by Trump fare in the 2018 Midterm Elections?\n&amp;quot;)  +
  theme(legend.text = element_text(size = 8),
    axis.title = element_text(size = 10, face = &amp;quot;bold&amp;quot;),
    plot.title = element_text(size = 14, face = &amp;quot;bold&amp;quot;, hjust = 0),
    plot.caption = element_text(size = 10),
    legend.position = &amp;quot;bottom&amp;quot;,
    legend.title = element_text(size = 8), 
    ) 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/favstats/trump_endorsements/blob/master/images/gg_freqs2.png?raw=true&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://github.com/favstats/trump_endorsements/blob/master/images/gg_freqs2.png?raw=true&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ggsave_it(gg_freqs2, width = 10, height = 6)
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>
